# import { DateTime, JSON } from '../../Scalars.graphql'
# import { Node } from '../../Node.graphql'
# import { ExternalAccount } from '../../connect/ExternalAccounts/typeDefs.graphql'
# import { Object, ObjectType } from '../../Object.graphql'
# import { CountryCode } from '../../Country.graphql'
# import { Currency } from '../../Currency.graphql'
# import Directives from '../../Directives.graphql'
# import { Account } from '../../connect/Accounts/typeDefs.graphql'
# import { Customer, CustomerWhereUniqueInput } from '../../core/Customers/typeDefs.graphql'
# import { BusinessType } from '../../BusinessType.graphql'

type BankAccount implements ExternalAccount & Node & Object {
  account: Account @expandable
  """
  The name of the person or business that owns the bank account.
  """
  account_holder_name: String

  """
  The type of entity that holds the account. This can be either `individual` or `company`.
  """
  account_holder_type: BusinessType

  """
  Name of the bank associated with the routing number (e.g., `WELLS FARGO`).
  """
  bank_name: String

  """
  Two-letter ISO code representing the country the bank account is located in.
  """
  country: CountryCode

  """
  Three-letter [ISO code for the currency](https://stripe.com/docs/payouts) paid out to the bank account.
  """
  currency: Currency
  customer: Customer @expandable

  """
  Whether this bank account is the default external account for its currency.
  """
  default_for_currency: Boolean

  """
  Uniquely identifies this particular bank account. You can use this attribute
  to check whether two bank accounts are the same.
  """
  fingerprint: ID

  """
  Unique identifier for the object.
  """
  id: ID!
  last4: String

  """
  Set of key-value pairs that you can attach to an object. This can be useful
  for storing additional information about the object in a structured format.
  """
  metadata: JSON

  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: ObjectType

  """
  The routing transit number for the bank account.
  """
  routing_number: String

  """
  For bank accounts, possible values are `new`, `validated`, `verified`,
  `verification_failed`, or `errored`. A bank account that hasn't had any
  activity or validation performed is `new`. If Stripe can determine that the
  bank account exists, its status will be `validated`. Note that there often
  isn’t enough information to know (e.g., for smaller credit unions), and the
  validation is not always run. If customer bank account verification has
  succeeded, the bank account status will be `verified`. If the verification
  failed for any reason, such as microdeposit failure, the status will be
  `verification_failed`. If a transfer sent to this bank account fails, we'll
  set the status to `errored` and will not continue to send transfers until the
  bank details are updated.

  For external accounts, possible values are `new` and `errored`. Validations
  aren't run against external accounts because they're only used for payouts.
  This means the other statuses don't apply. If a transfer fails, the status is
  set to `errored` and transfers are stopped until account details are updated.
  """
  status: BankAccountStatus
}

enum BankAccountStatus {
  new
  validated
  verified
  verification_failed
  errored
}

input BankAccountCreateInput {
  """
  Either a token, like the ones returned by Stripe.js, or a dictionary containing a user’s bank account details (with the options shown below).
  """
  source: BankAccountInput
  """
  A set of key-value pairs that you can attach to a card object. It can be useful for storing additional information about the card in a structured format.
  """
  metadata: JSON
}

input BankAccountInput {
  """
  The type of external account. Should be bank_account.
  """
  object: BankAccountObjectType!
  """
  The country in which the bank account is located.
  """
  country: String!
  """
  The currency the bank account is in. This must be a country/currency pairing that Stripe supports.
  """
  currency: Currency!
  """
  The name of the person or business that owns the bank account. This field is required when attaching the bank account to a Customer object.
  """
  account_holder_name: String
  """
  The type of entity that holds the account. This can be either individual or company. This field is required when attaching the bank account to a Customer object.
  """
  account_holder_type: BusinessType
  """
  The routing number, sort code, or other country-appropriate institution number for the bank account. For US bank accounts, this is required and should be the ACH routing number, not the wire routing number. If you are providing an IBAN for account_number, this field is not required.
  """
  routing_number: Int
  """
  The account number for the bank account, in string form. Must be a checking account.
  """
  account_number: String!
}

enum BankAccountObjectType {
  bank_account
}

"""
No description available.
"""
type BankAccountList implements Object {
  data: [BankAccount]

  """
  True if this list has another page of items after this one that can be fetched.
  """
  has_more: Boolean

  """
  String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
  """
  object: ObjectType

  """
  The URL where this list can be accessed.
  """
  url: String
}

type DeleteBankAccountPayload {
  id: ID
  object: ObjectType
  deleted: Boolean
}

enum Billing {
  chargeAutomatically
  sendInvoice
}

input BankAccountWhereUniqueInput {
  id: ID!
}

input BankAccountListInput {
  """
  A cursor for use in pagination. ending_before is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with obj_bar, your subsequent call can include ending_before=obj_bar in order to fetch the previous page of the list.
  """
  ending_before: ID
  """
  A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
  """
  limit: Int
  """
  A cursor for use in pagination. starting_after is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include starting_after=obj_foo in order to fetch the next page of the list.
  """
  starting_after: ID
}

input BankAccountVerifyInput {
  """
  Two positive integers, in cents, equal to the values of the microdeposits sent to the bank account.
  """
  amounts: [Int]
  #verification_method: String
}

input BankAccountUpdateInput {
  """
  The name of the person or business that owns the bank account.
  """
  account_holder_name: String
  """
  The type of entity that holds the account. This can be either individual or company.
  """
  account_holder_type: BusinessType
  metadata: JSON
}

type Query {
  """
  By default, you can see the 10 most recent sources stored on a Customer directly on the object, but you can also retrieve details about a specific bank account stored on the Stripe account.
  """
  retrieveBankAccount(
    whereCustomer: CustomerWhereUniqueInput!
    whereBankAccount: BankAccountWhereUniqueInput!
  ): BankAccount
  """
  You can see a list of the bank accounts belonging to a Customer. Note that the 10 most recent sources are always available by default on the Customer. If you need more than those 10, you can use this API method and the limit and starting_after parameters to page through additional bank accounts.
  """
  listBankAccounts(
    whereCustomer: CustomerWhereUniqueInput!
    input: BankAccountListInput
  ): BankAccountList
}

type Mutation {
  """
  When you create a new bank account, you must specify a Customer object on which to create it.
  """
  createBankAccount(
    whereCustomer: CustomerWhereUniqueInput!
    data: BankAccountCreateInput!
  ): BankAccount
  """
  Updates the account_holder_name, account_holder_type, and metadata of a bank account belonging to a customer. Other bank account details are not editable, by design.
  """
  updateBankAccount(
    whereCustomer: CustomerWhereUniqueInput!
    """
    The ID of the bank account to be updated.
    """
    whereBankAccount: BankAccountWhereUniqueInput!
    data: BankAccountUpdateInput!
  ): BankAccount
  """
  You can delete bank accounts from a Customer.
  """
  deleteBankAccount(
    whereCustomer: CustomerWhereUniqueInput!
    whereBankAccount: BankAccountWhereUniqueInput!
  ): DeleteBankAccountPayload
  """
  A customer's bank account must first be verified before it can be charged. Stripe supports instant verification using Plaid for many of the most popular banks. If your customer's bank is not supported or you do not wish to integrate with Plaid, you must manually verify the customer's bank account using the API.
  """
  verifyBankAccount(
    whereCustomer: CustomerWhereUniqueInput!
    whereBankAccount: BankAccountWhereUniqueInput!
    data: BankAccountVerifyInput!
  ): BankAccount
}
