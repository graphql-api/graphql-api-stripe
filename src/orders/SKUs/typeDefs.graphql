# import { Currency } from '../../Currency.graphql'
# import { Node } from '../../Node.graphql'
# import { Object, ObjectType } from '../../Object.graphql'
# import { DateTime, JSON } from '../../Scalars.graphql'
# import { PackageDimensions, PackageDimensionsInput } from '../../PackageDimensions.graphql'
# import { Product } from '../../core/Products/typeDefs.graphql'
# import Directives from '../../Directives.graphql'

"""
Stores representations of stock keeping units. SKUs describe specific product variations, taking into account any combination of: attributes, currency, and cost. For example, a product may be a t- shirt, whereas a specific SKU represents the size: large, color: red version of that shirt.

Can also be used to manage inventory.
"""
type SKU implements Node & Object {
  """
  Unique identifier for the object.
  """
  id: ID!
  """
  String representing the object’s type. Objects of the same type share the same value.
  """
  object: ObjectType
  """
  Whether the SKU is available for purchase.
  """
  active: Boolean
  """
  A dictionary of attributes and values for the attributes defined by the product. If, for example, a product’s attributes are ['size', 'gender'], a valid SKU has the following dictionary of attributes: {'size': 'Medium', 'gender': 'Unisex'}.
  """
  attributes: JSON
  """
  Time at which the object was created. Measured in seconds since the Unix epoch.
  """
  created: DateTime
  """
  Three-letter ISO currency code, in lowercase. Must be a supported currency.
  """
  currency: Currency
  """
  The URL of an image for this SKU, meant to be displayable to the customer.
  """
  image: String
  """
  Description of the SKU’s inventory.
  """
  inventory: Inventory
  """
  Has the value [true] if the object exists in live mode or the value [false] if the object exists in test mode.
  """
  livemode: Boolean

  """
  Set of key-value pairs that you can attach to an object. This can be useful
  for storing additional information about the object in a structured format.
  """
  metadata: JSON

  """
  The dimensions of this SKU for shipping purposes.
  """
  package_dimensions: PackageDimensions

  """
  The cost of the item as a positive integer in the smallest currency unit (that
  is, 100 cents to charge $1.00, or 100 to charge ¥100, Japanese Yen being a
  zero-decimal currency).
  """
  price: Int

  """
  The ID of the product this SKU is associated with. The product must be currently active.
  """
  product: Product @expandable
  updated: DateTime
}

type Inventory {
  """
  The count of inventory available. Will be present if and only if [type] is [finite].
  """
  quantity: Int

  """
  Inventory type. Possible values are [finite], [bucket] (not quantified), and [infinite].
  """
  type: InventoryType

  """
  An indicator of the inventory available. Possible values are [in_stock],
  [limited], and [out_of_stock]. Will be present if and only if [type] is [bucket].
  """
  value: String
}

enum InventoryType {
  finite
  bucket
  infinite
}

enum InventoryStatus {
  in_stock
  limited
  out_of_stock
}

"""
Description of the SKU's inventory.
"""
input InventoryInput {
  quantity: Int
  type: InventoryType
  value: InventoryStatus
}

type SKUList implements Object {
  object: ObjectType
  data: [SKU]
  has_more: Boolean
  url: String
}

type SKUDeletePayload implements Object {
  object: ObjectType
  id: ID!
  deleted: Boolean
}

input SKUWhereUniqueInput {
  id: ID!
}

input SKUWhereInput {
  """
  Only return SKUs that are active or inactive (e.g., pass [false] to list all inactive products).
  """
  active: Boolean

  """
  Only return SKUs that have the specified key-value pairs in this partially
  constructed dictionary. Can be specified only if [product] is also supplied.
  For instance, if the associated product has attributes [["color", "size"]],
  passing in [attributes[color]=red] returns all the SKUs for this product
  that have [color] set to [red].
  """
  attributes: JSON

  """
  A cursor for use in pagination. [ending_before] is an object ID that defines
  your place in the list. For instance, if you make a list request and receive
  100 objects, starting with [obj_bar], your subsequent call can include
  [ending_before=obj_bar] in order to fetch the previous page of the list.
  """
  ending_before: ID

  """
  Only return SKUs with the given IDs.
  """
  ids: [ID]

  """
  Only return SKUs that are either in stock or out of stock (e.g., pass
  [false] to list all SKUs that are out of stock). If no value is provided,
  all SKUs are returned.
  """
  in_stock: Boolean

  """
  A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
  """
  limit: Int

  """
  The ID of the product whose SKUs will be retrieved. Must be a product with type [good].
  """
  product: ID

  """
  A cursor for use in pagination. [starting_after] is an object ID that
  defines your place in the list. For instance, if you make a list request and
  receive 100 objects, ending with [obj_foo], your subsequent call can include
  [starting_after=obj_foo] in order to fetch the next page of the list.
  """
  starting_after: ID
}

input SKUCreateInput {
  """
  Whether the SKU is available for purchase. Default to [true].
  """
  active: Boolean

  """
  A dictionary of attributes and values for the attributes defined by the
  product. If, for example, a product's attributes are [["size", "gender"]], a
  valid SKU has the following dictionary of attributes: [{"size": "Medium",
  "gender": "Unisex"}].
  """
  attributes: JSON

  """
  Three-letter [ISO currency
  code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be
  a [supported currency](https://stripe.com/docs/currencies).
  """
  currency: Currency!

  """
  The identifier for the SKU. Must be unique. If not provided, an identifier will be randomly generated.
  """
  id: ID

  """
  The URL of an image for this SKU, meant to be displayable to the customer.
  """
  image: String @constraint(format: "url")

  """
  Description of the SKU's inventory.
  """
  inventory: InventoryInput!

  """
  A set of key-value pairs that you can attach to a SKU object. It can be useful
  for storing additional information about the SKU in a structured format.
  """
  metadata: JSON

  """
  The dimensions of this SKU for shipping purposes.
  """
  packageDimensions: PackageDimensionsInput

  """
  The cost of the item as a nonnegative integer in the smallest currency unit
  (that is, 100 cents to charge $1.00, or 100 to charge ¥100, Japanese Yen being
  a zero-decimal currency).
  """
  price: Int!

  """
  The ID of the product this SKU is associated with. Must be a product with type [good].
  """
  product: ID!
}

input SKUUpdateInput {
  """
  Whether this SKU is available for purchase.
  """
  active: Boolean

  """
  A dictionary of attributes and values for the attributes defined by the
  product. When specified, [attributes] will partially update the existing
  attributes dictionary on the product, with the postcondition that a value must
  be present for each attribute key on the product.
  """
  attributes: JSON

  """
  Three-letter [ISO currency
  code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be
  a [supported currency](https://stripe.com/docs/currencies).
  """
  currency: Currency

  """
  The URL of an image for this SKU, meant to be displayable to the customer.
  """
  image: String @constraint(format: "url")

  """
  Description of the SKU's inventory.
  """
  inventory: InventoryInput

  """
  A set of key-value pairs that you can attach to a SKU object. It can be useful
  for storing additional information about the SKU in a structured format.
  """
  metadata: JSON

  """
  The dimensions of this SKU for shipping purposes.
  """
  packageDimensions: PackageDimensionsInput

  """
  The cost of the item as a positive integer in the smallest currency unit (that
  is, 100 cents to charge $1.00, or 100 to charge ¥100, Japanese Yen being a
  zero-decimal currency).
  """
  price: Int

  """
  The ID of the product that this SKU should belong to. The product must exist,
  have the same set of attribute names as the SKU's current product, and be of type [good].
  """
  product: ID
}

type Query {
  """
  Retrieves the details of an existing SKU. Supply the unique SKU identifier from either a SKU creation request or from the product, and Stripe will return the corresponding SKU information.
  """
  retrieveSKU(where: SKUWhereUniqueInput!): SKU
  listSKUs(where: SKUWhereInput): SKUList
}

type Mutation {
  createSKU(data: SKUCreateInput!): SKU
  """
  Updates the specific SKU by setting the values of the parameters passed. Any parameters not provided will be left unchanged.

  Note that a SKU’s attributes are not editable. Instead, you would need to deactivate the existing SKU and create a new one with the new attribute values.
  """
  updateSKU(where: SKUWhereUniqueInput!, data: SKUUpdateInput!): SKU
  deleteSKU(where: SKUWhereUniqueInput!): SKUDeletePayload
}
