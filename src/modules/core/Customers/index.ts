import "reflect-metadata";
import { ModuleConfig, GraphQLModule } from "@graphql-modules/core";
import { Inject, Injectable } from "@graphql-modules/di";
import * as Stripe from "stripe";
import { resolvers as mainResolvers } from "./resolvers";
import { default as defaultResolvers } from "/Users/jonathanallenberg/Git/graphql-api/packages/stripe/src/resolvers";
export const resolvers = {
  DateTime: defaultResolvers.DateTime,
  JSON: defaultResolvers.JSON,
  Node: defaultResolvers.Node,
  Object: defaultResolvers.Object,
  ExternalAccount: defaultResolvers.ExternalAccount,
  Account: defaultResolvers.Account,
  ...mainResolvers
};

interface CoreConfig {
  stripe: string | Stripe;
}

// prettier-ignore
export const typeDefs = "type Query {\n  node(id: ID!): Node\n  retrieveCustomer(where: CustomerWhereUniqueInput!): Customer\n  \"\"\"Returns a list of your customers. The customers are returned sorted by creation date, with the most recent customers appearing first.\"\"\"\n  listCustomers(where: CustomerWhereInput): CustomerList\n}\n\ntype Mutation {\n  createCustomer(data: CustomerCreateInput!): Customer!\n  updateCustomer(where: CustomerWhereUniqueInput!, data: CustomerUpdateInput!): Customer\n  deleteCustomer(where: CustomerWhereUniqueInput!): DeleteCustomerPayload\n}\n\ntype Customer implements Object {\n  id: ID\n  \"\"\"String representing the object’s type. Objects of the same type share the same value.\"\"\"\n  object: ObjectType\n  \"\"\"Current balance, if any, being stored on the customer’s account. If negative, the customer has credit to apply to the next invoice. If positive, the customer has an amount owed that will be added to the next invoice. The balance does not refer to any unpaid invoices; it solely takes into account amounts that have yet to be successfully applied to any invoice. This balance is only taken into account as invoices are finalized. Note that the balance does not include unpaid invoices.\"\"\"\n  account_balance: Int\n  \"\"\"Time at which the object was created. Measured in seconds since the Unix epoch.\"\"\"\n  created: DateTime\n  currency: Currency\n  \"\"\"ID of the default source attached to this customer.\"\"\"\n  default_source: Source\n  \"\"\"When the customer’s latest invoice is billed by charging automatically, delinquent is true if the invoice’s latest charge is failed. When the customer’s latest invoice is billed by sending an invoice, delinquent is true if the invoice is not paid by its due date.\"\"\"\n  delinquent: Boolean\n  \"\"\"An arbitrary string attached to the object. Often useful for displaying to users.\"\"\"\n  description: String\n  discount: Discount\n  \"\"\"The customer’s email address.\"\"\"\n  email: String\n  \"\"\"The prefix for the customer used to generate unique invoice numbers.\"\"\"\n  invoice_prefix: String\n  \"\"\"The customer’s default invoice settings.\"\"\"\n  invoice_settings: CustomerInvoiceSetting\n  \"\"\"Has the value true if the object exists in live mode or the value false if the object exists in test mode.\"\"\"\n  livemode: Boolean\n  \"\"\"Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format.\"\"\"\n  metadata: JSON\n  shipping: CustomerShipping\n  sources: CustomerPaymentSource\n  \"\"\"The customer’s current subscriptions, if any.\"\"\"\n  subscriptions: BillingSubscriptionList\n  \"\"\"The customer’s tax information. Appears on invoices emailed to this customer.\"\"\"\n  tax_info: CustomerTaxInformation\n  \"\"\"Describes the status of looking up the tax ID provided in tax_info.\"\"\"\n  tax_info_verification: CustomerTaxInformationVerification\n}\n\n\"\"\"The customer’s tax information. Appears on invoices emailed to this customer.\"\"\"\ntype CustomerTaxInformation {\n  \"\"\"The customer’s tax ID number.\"\"\"\n  tax_id: ID\n  \"\"\"The type of ID number.\"\"\"\n  type: TaxType\n}\n\ninput CustomerTaxInformationInput {\n  \"\"\"The customer’s tax ID number. This can be unset by updating the value to null and then saving.\"\"\"\n  tax_id: ID!\n  \"\"\"The type of ID number. The only possible value is vat\"\"\"\n  type: TaxType!\n}\n\nenum TaxType {\n  vat\n}\n\n\"\"\"Describes the status of looking up the tax ID provided in tax_info.\"\"\"\ntype CustomerTaxInformationVerification {\n  \"\"\"The state of verification for this customer\"\"\"\n  status: VerificationStatus\n  \"\"\"The official name associated with the tax ID returned from the external provider.\"\"\"\n  verified_name: String\n}\n\nenum VerificationStatus {\n  unverfied\n  pending\n  verrified\n}\n\n\"\"\"The customer’s default invoice settings.\"\"\"\ntype CustomerInvoiceSetting {\n  \"\"\"Default custom fields to be displayed on invoices for this customer.\"\"\"\n  custom_fields: CustomerInvoiceSettingCustomField\n  \"\"\"Default footer to be displayed on invoices for this customer.\"\"\"\n  footer: String\n}\n\n\"\"\"Default custom fields to be displayed on invoices for this customer.\"\"\"\ntype CustomerInvoiceSettingCustomField {\n  \"\"\"The name of the custom field.\"\"\"\n  name: String!\n  \"\"\"The value of the custom field.\"\"\"\n  value: String!\n}\n\n\"\"\"Mailing and shipping address for the customer. Appears on invoices emailed to this customer.\"\"\"\ntype CustomerShipping {\n  \"\"\"Customer name.\"\"\"\n  name: String\n  \"\"\"Customer phone (including extension).\"\"\"\n  phone: String\n  \"\"\"Customer shipping address.\"\"\"\n  address: Address\n}\n\n\"\"\"The customer’s payment sources, if any.\"\"\"\ntype CustomerPaymentSource {\n  data: [Source]\n  \"\"\"True if this list has another page of items after this one that can be fetched.\"\"\"\n  has_more: Boolean\n  \"\"\"The URL where this list can be accessed.\"\"\"\n  url: String\n}\n\ninput CustomerWhereUniqueInput {\n  id: ID!\n}\n\ninput CustomerUpdateInput {\n  \"\"\"An integer amount in cents that represents the account balance for your customer. Account balances only affect invoices. A negative amount represents a credit that decreases the amount due on an invoice; a positive amount increases the amount due on an invoice.\"\"\"\n  account_balance: Int\n  \"\"\"If you provide a coupon code, the customer will have a discount applied on all recurring charges. Charges you create through the API will not have the discount. This can be unset by updating the value to null and then saving.\"\"\"\n  coupon: ID\n  \"\"\"ID of the default payment source for the customer.\"\"\"\n  default_source: String\n  \"\"\"An arbitrary string that you can attach to a customer object. It is displayed alongside the customer in the dashboard. This can be unset by updating the value to null and then saving.\"\"\"\n  description: String\n  \"\"\"Customer’s email address. It’s displayed alongside the customer in your dashboard and can be useful for searching and tracking. This may be up to 512 characters. This can be unset by updating the value to null and then saving.\"\"\"\n  email: String @constraint(format: \"email\")\n  \"\"\"The prefix for the customer used to generate unique invoice numbers. Must be 3–12 uppercase letters or numbers.\"\"\"\n  invoice_prefix: String\n  \"\"\"Default invoice settings for this customer.\"\"\"\n  invoice_settings: CustomerInvoiceSettingInput\n  \"\"\"A set of key-value pairs that you can attach to a customer object. It can be useful for storing additional information about the customer in a structured format.\"\"\"\n  metadata: JSON\n  \"\"\"The customer’s shipping information. Appears on invoices emailed to this customer.\"\"\"\n  shipping: CustomerShippingInput\n  \"\"\"A Token’s or a Source’s ID, as returned by Elements. Passing source will create a new source object, make it the new customer default source, and delete the old customer default if one exists. If you want to add additional sources instead of replacing the existing default, use the card creation API. Whenever you attach a card to a customer, Stripe will automatically validate the card.\"\"\"\n  source: String\n  \"\"\"The customer’s tax information. Appears on invoices emailed to this customer.\"\"\"\n  tax_info: CustomerTaxInformationInput\n}\n\ninput CustomerCreateInput {\n  \"\"\"An integer amount in cents that represents the account balance for your customer. Account balances only affect invoices. A negative amount represents a credit that decreases the amount due on an invoice; a positive amount increases the amount due on an invoice.\"\"\"\n  account_balance: Int\n  \"\"\"The code of the coupon to apply to this subscription. A coupon applied to a subscription will only affect invoices created for that particular subscription. This can be unset by updating the value to null and then saving.\"\"\"\n  coupon: ID\n  default_source: String\n  \"\"\"An arbitrary string that you can attach to a customer object. It is displayed alongside the customer in the dashboard. This can be unset by updating the value to null and then saving.\"\"\"\n  description: String\n  email: String @constraint(format: \"email\")\n  \"\"\"The prefix for the customer used to generate unique invoice numbers. Must be 3–12 uppercase letters or numbers.\"\"\"\n  invoice_prefix: String\n  \"\"\"Default invoice settings for this customer.\"\"\"\n  invoice_settings: CustomerInvoiceSettingInput\n  \"\"\"Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format.\"\"\"\n  metadata: JSON\n  shipping: CustomerShippingInput\n  \"\"\"The source can either be a Token or a Source, as returned by Elements, or a object containing a user’s credit card details (with the options shown below). You must provide a source if the customer does not already have a valid source attached, and you are subscribing the customer to be charged automatically for a plan that is not free. Passing source will create a new source object, make it the customer default source, and delete the old customer default if one exists. If you want to add an additional source, instead use the card creation API to add the card and then the customer update API to set it as the default. Whenever you attach a card to a customer, Stripe will automatically validate the card.\"\"\"\n  source: String\n  \"\"\"The customer’s tax information. Appears on invoices emailed to this customer.\"\"\"\n  tax_info: CustomerTaxInformationInput\n}\n\ninput CustomerPaymentSourceInput {\n  token: String\n  soure: String\n}\n\ninput CustomerShippingInput {\n  \"\"\"Customer shipping address.\"\"\"\n  address: AddressInput!\n  \"\"\"Customer name. This can be unset by updating the value to null and then saving.\"\"\"\n  name: String!\n  \"\"\"Customer phone (including extension). This can be unset by updating the value to null and then saving.\"\"\"\n  phone: String\n}\n\n\"\"\"Default invoice settings for this customer.\"\"\"\ninput CustomerInvoiceSettingInput {\n  \"\"\"Default custom fields to be displayed on invoices for this customer.\"\"\"\n  custom_fields: CustomerInvoiceSettingCustomFieldInput\n  \"\"\"Default footer to be displayed on invoices for this customer.\"\"\"\n  footer: String\n}\n\n\"\"\"Default custom fields to be displayed on invoices for this customer.\"\"\"\ninput CustomerInvoiceSettingCustomFieldInput {\n  \"\"\"The name of the custom field. This may be up to 30 characters.\"\"\"\n  name: String\n  \"\"\"The value of the custom field. This may be up to 30 characters.\"\"\"\n  value: String\n}\n\ninput CustomerWhereInput {\n  created: CreatedInput\n  \"\"\"A filter on the list based on the customer’s email field. The value must be a string.\"\"\"\n  email: String @constraint(format: \"email\")\n  \"\"\"A cursor for use in pagination. ending_before is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with obj_bar, your subsequent call can include ending_before=obj_bar in order to fetch the previous page of the list.\"\"\"\n  ending_before: ID\n  \"\"\"A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.\"\"\"\n  limit: Int\n  \"\"\"A cursor for use in pagination. starting_after is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include starting_after=obj_foo in order to fetch the next page of the list.\"\"\"\n  starting_after: ID\n}\n\ntype CustomerList implements Object {\n  object: ObjectType\n  url: String\n  has_more: Boolean\n  data: [Customer]\n}\n\ntype DeleteCustomerPayload implements Object {\n  id: ID\n  object: ObjectType\n  deleted: Boolean\n}\n\ninterface Object {\n  object: ObjectType\n}\n\nenum ObjectType {\n  account\n  account_link\n  apple_pay_domain\n  application_fee\n  balance\n  balance_ransaction\n  bank_account\n  bitcoin_receiver\n  bitcoin_transaction\n  card\n  charge\n  \"checkout.session\"\n  country_spec\n  coupon\n  customer\n  discount\n  dispute\n  ephemeralKey\n  event\n  exchangeRate\n  feeRefund\n  file\n  fileLink\n  invoice\n  invoiceitem\n  issuerFraudRecord\n  issuingAuthorization\n  issuingCard\n  issuingCardDetails\n  issuingCardPin\n  issuingCardholder\n  issuingDispute\n  issuingSettlement\n  issuingTransaction\n  issuingVerification\n  lineItem\n  list\n  loginLink\n  order\n  orderItem\n  orderReturn\n  paymentIntent\n  paymentMethod\n  payout\n  person\n  plan\n  product\n  radarValueList\n  radarValueListItem\n  recipient\n  refund\n  reportingReportRun\n  reportingReportType\n  review\n  scheduledQueryRun\n  sku\n  source\n  sourceMandateNotification\n  sourceTransaction\n  subscription\n  subscriptionItem\n  subscriptionSchedule\n  subscriptionScheduleRevision\n  terminalConnectionToken\n  terminalLocation\n  terminalReader\n  threeDSecure\n  token\n  topup\n  transfer\n  transferReversal\n  usageRecord\n  usageRecordSummary\n  webhookEndpoint\n}\n\nscalar DateTime\n\n\"\"\"Three-letter <a href=\"https://stripe.com/docs/currencies\">ISO code for the currency</a> the customer can be charged in for recurring billing purposes.\"\"\"\nenum Currency {\n  usd\n  aed\n  afn\n  all\n  amd\n  ang\n  aoa\n  ars\n  aud\n  awg\n  azn\n  bam\n  bbd\n  bdt\n  bgn\n  bif\n  bmd\n  bnd\n  bob\n  brl\n  bsd\n  bwp\n  bzd\n  cad\n  cdf\n  chf\n  clp\n  cny\n  cop\n  crc\n  cve\n  czk\n  djf\n  dkk\n  dop\n  dzd\n  egp\n  etb\n  eur\n  fjd\n  fkp\n  gbp\n  gel\n  gip\n  gmd\n  gnf\n  gtq\n  gyd\n  hkd\n  hnl\n  hrk\n  htg\n  huf\n  idr\n  ils\n  inr\n  isk\n  jmd\n  jpy\n  kes\n  kgs\n  khr\n  kmf\n  krw\n  kyd\n  kzt\n  lak\n  lbp\n  lkr\n  lrd\n  lsl\n  mad\n  mdl\n  mga\n  mkd\n  mmk\n  mnt\n  mop\n  mro\n  mur\n  mvr\n  mwk\n  mxn\n  myr\n  mzn\n  nad\n  ngn\n  nio\n  nok\n  npr\n  nzd\n  pab\n  pen\n  pgk\n  php\n  pkr\n  pln\n  pyg\n  qar\n  ron\n  rsd\n  rub\n  rwf\n  sar\n  sbd\n  scr\n  sek\n  sgd\n  shp\n  sll\n  sos\n  srd\n  std\n  szl\n  thb\n  tjs\n  top\n  try\n  ttd\n  twd\n  tzs\n  uah\n  ugx\n  uyu\n  uzs\n  vnd\n  vuv\n  wst\n  xaf\n  xcd\n  xof\n  xpf\n  yer\n  zar\n  zmw\n}\n\n\"\"\"https://stripe.com/docs/api/sources\"\"\"\ntype Source implements Node & Object {\n  \"\"\"Unique identifier for the object.\"\"\"\n  id: ID!\n  \"\"\"String representing the object’s type. Objects of the same type share the same value.\"\"\"\n  object: ObjectType\n  \"\"\"A positive integer in the smallest currency unit (that is, 100 cents for $1.00, or 1 for ¥1, Japanese Yen being a zero-decimal currency) representing the total amount associated with the source. This is the amount for which the source will be chargeable once ready. Required for single_use sources.\"\"\"\n  amount: Int\n  \"\"\"The client secret of the source. Used for client-side retrieval using a publishable key.\"\"\"\n  client_secret: String\n  \"\"\"Information related to the code verification flow. Present if the source is authenticated by a verification code (flow is code_verification).\"\"\"\n  code_verification: CodeVerification\n  \"\"\"Time at which the object was created. Measured in seconds since the Unix epoch.\"\"\"\n  created: DateTime\n  \"\"\"Three-letter ISO code for the currency associated with the source. This is the currency for which the source will be chargeable once ready. Required for single_use sources.\"\"\"\n  currency: Currency\n  \"\"\"The ID of the customer to which this source is attached. This will not be present when the source has not been attached to a customer.\"\"\"\n  customer: ID\n  \"\"\"The authentication flow of the source. flow is one of redirect, receiver, code_verification, none.\"\"\"\n  flow: Flow\n  \"\"\"Has the value true if the object exists in live mode or the value false if the object exists in test mode.\"\"\"\n  livemode: Boolean\n  \"\"\"Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format.\"\"\"\n  metadata: JSON\n  \"\"\"Information about the owner of the payment instrument that may be used or required by particular source types.\"\"\"\n  owner: Owner\n  \"\"\"Information related to the receiver flow. Present if the source is a receiver (flow is receiver).\"\"\"\n  receiver: Receiver\n  \"\"\"Information related to the redirect flow. Present if the source is authenticated by a redirect (flow is redirect).\"\"\"\n  redirect: Redirect\n  \"\"\"Extra information about a source. This will appear on your customer’s statement every time you charge the source.\"\"\"\n  statement_descriptor: String\n  \"\"\"The status of the source, one of canceled, chargeable, consumed, failed, or pending. Only chargeable sources can be used to create a charge.\"\"\"\n  status: SourceStatus\n  \"\"\"Either reusable or single_use. Whether this source should be reusable or not. Some source types may or may not be reusable by construction, while others may leave the option at creation. If an incompatible value is passed, an error will be returned.\"\"\"\n  usage: SourceUsage\n  \"\"\"The type of the source. The type is a payment method, one of ach_credit_transfer, ach_debit, alipay, bancontact, card, card_present, eps, giropay, ideal, multibanco, p24, paper_check, sepa_credit_transfer, sepa_debit, sofort, three_d_secure, or wechat. An additional hash is included on the source with a name matching this value. It contains additional information specific to the payment method used.\"\"\"\n  type: SourceType\n  \"\"\"https://stripe.com/docs/sources/ach-credit-transfer\"\"\"\n  ach_credit_transfer: AchCreditTransfer\n  alipay: Alipay\n  bancontact: Bancontact\n  card: Card\n  eps: EPS\n  giropay: Giropay\n  ideal: iDEAL\n  multibanco: Multibanco\n  p24: Przelewy24\n  sepa_debit: SEPADirectDebit\n  sofort: SOFORT\n  wechat: WeChatPay\n}\n\ntype Discount implements Object {\n  \"\"\"String representing the object’s type. Objects of the same type share the same value.\"\"\"\n  object: ObjectType\n  \"\"\"Hash describing the coupon applied to create this discount.\"\"\"\n  coupon: Coupon\n  customer: Customer @expandable\n  \"\"\"If the coupon has a duration of repeating, the date that this discount will end. If the coupon has a duration of once or forever, this attribute will be null.\"\"\"\n  end: DateTime\n  \"\"\"Date that the coupon was applied.\"\"\"\n  start: DateTime\n  \"\"\"The subscription that this coupon is applied to, if it is applied to a particular subscription.\"\"\"\n  subscription: String\n}\n\nscalar JSON\n\ntype BillingSubscriptionList implements Object {\n  \"\"\"String representing the object’s type. Objects of the same type share the same value. Always has the value list.\"\"\"\n  object: ObjectType\n  data: [BillingSubscription]\n  \"\"\"True if this list has another page of items after this one that can be fetched.\"\"\"\n  has_more: Boolean\n  \"\"\"The URL where this list can be accessed.\"\"\"\n  url: String\n}\n\ntype Address {\n  city: String\n  \"\"\"2-letter country code.\"\"\"\n  country: CountryCode\n  \"\"\"Address line 1 (Street address/PO Box/Company name).\"\"\"\n  line1: String\n  \"\"\"Address line 2 (Apartment/Suite/Unit/Building).\"\"\"\n  line2: String\n  \"\"\"ZIP or postal code.\"\"\"\n  postal_code: String\n  \"\"\"State/County/Province/Region.\"\"\"\n  state: String\n}\n\ndirective @constraint(minLength: Int, maxLength: Int, startsWith: String, endsWith: String, contains: String, notContains: String, pattern: String, format: String, min: Float, max: Float, exclusiveMin: Float, exclusiveMax: Float, multipleOf: Float) on INPUT_FIELD_DEFINITION\n\ninput AddressInput {\n  \"\"\"Address line 1 (Street address/PO Box/Company name).\"\"\"\n  line1: String!\n  city: String\n  country: CountryCode\n  \"\"\"Address line 2 (Apartment/Suite/Unit/Building).\"\"\"\n  line2: String\n  \"\"\"ZIP or postal code.\"\"\"\n  postal_code: String\n  \"\"\"State/County/Province/Region.\"\"\"\n  state: String\n}\n\n\"\"\"A filter on the list based on the object field. The value can be a string with an integer Unix timestamp, or it can be a dictionary with the following options:\"\"\"\ninput CreatedInput {\n  \"\"\"Return results where the field is greater than this value.\"\"\"\n  gt: Int\n  \"\"\"Return results where the field is greater than or equal to this value.\"\"\"\n  gte: Int\n  \"\"\"Return results where the field is less than this value.\"\"\"\n  lt: Int\n  \"\"\"Return results where the field is less than or equal to this value.\"\"\"\n  lte: Int\n}\n\ninterface Node {\n  id: ID!\n}\n\n\"\"\"An ISO 3166-1 alpha-2 country code. Available country codes can be listed with the List Country Specs endpoint.\"\"\"\nenum CountryCode {\n  AF\n  AX\n  AL\n  DZ\n  AS\n  AD\n  AO\n  AI\n  AQ\n  AG\n  AR\n  AM\n  AW\n  AU\n  AT\n  AZ\n  BS\n  BH\n  BD\n  BB\n  BY\n  BE\n  BZ\n  BJ\n  BM\n  BT\n  BO\n  BQ\n  BA\n  BW\n  BV\n  BR\n  IO\n  VG\n  BN\n  BG\n  BF\n  BI\n  KH\n  CM\n  CA\n  CV\n  KY\n  CF\n  TD\n  CL\n  CN\n  CX\n  CC\n  CO\n  KM\n  CK\n  CR\n  HR\n  CU\n  CW\n  CY\n  CZ\n  CD\n  DK\n  DJ\n  DM\n  DO\n  TL\n  EC\n  EG\n  SV\n  GQ\n  ER\n  EE\n  ET\n  FK\n  FO\n  FJ\n  FI\n  FR\n  GF\n  PF\n  TF\n  GA\n  GM\n  GE\n  DE\n  GH\n  GI\n  GR\n  GL\n  GD\n  GP\n  GU\n  GT\n  GG\n  GN\n  GW\n  GY\n  HT\n  HM\n  HN\n  HK\n  HU\n  IS\n  IN\n  ID\n  IR\n  IQ\n  IE\n  IM\n  IL\n  IT\n  CI\n  JM\n  JP\n  JE\n  JO\n  KZ\n  KE\n  KI\n  XK\n  KW\n  KG\n  LA\n  LV\n  LB\n  LS\n  LR\n  LY\n  LI\n  LT\n  LU\n  MO\n  MK\n  MG\n  MW\n  MY\n  MV\n  ML\n  MT\n  MH\n  MQ\n  MR\n  MU\n  YT\n  MX\n  FM\n  MD\n  MC\n  MN\n  ME\n  MS\n  MA\n  MZ\n  MM\n  NA\n  NR\n  NP\n  NL\n  AN\n  NC\n  NZ\n  NI\n  NE\n  NG\n  NU\n  NF\n  KP\n  MP\n  NO\n  OM\n  PK\n  PW\n  PS\n  PA\n  PG\n  PY\n  PE\n  PH\n  PN\n  PL\n  PT\n  PR\n  QA\n  CG\n  RE\n  RO\n  RU\n  RW\n  BL\n  SH\n  KN\n  LC\n  MF\n  PM\n  VC\n  WS\n  SM\n  ST\n  SA\n  SN\n  RS\n  CS\n  SC\n  SL\n  SG\n  SX\n  SK\n  SI\n  SB\n  SO\n  ZA\n  GS\n  KR\n  SS\n  ES\n  LK\n  SD\n  SR\n  SJ\n  SZ\n  SE\n  CH\n  SY\n  TW\n  TJ\n  TZ\n  TH\n  TG\n  TK\n  TO\n  TT\n  TN\n  TR\n  TM\n  TC\n  TV\n  VI\n  UG\n  UA\n  AE\n  GB\n  US\n  UM\n  UY\n  UZ\n  VU\n  VA\n  VE\n  VN\n  WF\n  EH\n  YE\n  ZM\n  ZW\n}\n\nenum BankAccountObjectType {\n  bank_account\n}\n\nenum BusinessType {\n  individual\n  company\n}\n\ntype BankAccount implements ExternalAccount & Node & Object {\n  account: String @expandable\n  \"\"\"The name of the person or business that owns the bank account.\"\"\"\n  account_holder_name: String\n  \"\"\"The type of entity that holds the account. This can be either `individual` or `company`.\"\"\"\n  account_holder_type: BusinessType\n  \"\"\"Name of the bank associated with the routing number (e.g., `WELLS FARGO`).\"\"\"\n  bank_name: String\n  \"\"\"Two-letter ISO code representing the country the bank account is located in.\"\"\"\n  country: CountryCode\n  \"\"\"Three-letter [ISO code for the currency](https://stripe.com/docs/payouts) paid out to the bank account.\"\"\"\n  currency: Currency\n  customer: String @expandable\n  \"\"\"Whether this bank account is the default external account for its currency.\"\"\"\n  default_for_currency: Boolean\n  \"\"\"\n  Uniquely identifies this particular bank account. You can use this attribute\n  to check whether two bank accounts are the same.\n  \"\"\"\n  fingerprint: ID\n  \"\"\"Unique identifier for the object.\"\"\"\n  id: ID!\n  last4: String\n  \"\"\"\n  Set of key-value pairs that you can attach to an object. This can be useful\n  for storing additional information about the object in a structured format.\n  \"\"\"\n  metadata: JSON\n  \"\"\"String representing the object's type. Objects of the same type share the same value.\"\"\"\n  object: ObjectType\n  \"\"\"The routing transit number for the bank account.\"\"\"\n  routing_number: String\n  \"\"\"\n  For bank accounts, possible values are `new`, `validated`, `verified`,\n  `verification_failed`, or `errored`. A bank account that hasn't had any\n  activity or validation performed is `new`. If Stripe can determine that the\n  bank account exists, its status will be `validated`. Note that there often\n  isn’t enough information to know (e.g., for smaller credit unions), and the\n  validation is not always run. If customer bank account verification has\n  succeeded, the bank account status will be `verified`. If the verification\n  failed for any reason, such as microdeposit failure, the status will be\n  `verification_failed`. If a transfer sent to this bank account fails, we'll\n  set the status to `errored` and will not continue to send transfers until the\n  bank details are updated.\n  \n  For external accounts, possible values are `new` and `errored`. Validations\n  aren't run against external accounts because they're only used for payouts.\n  This means the other statuses don't apply. If a transfer fails, the status is\n  set to `errored` and transfers are stopped until account details are updated.\n  \"\"\"\n  status: BankAccountStatus\n}\n\n\"\"\"https://stripe.com/docs/api/cards/object\"\"\"\ntype Card implements ExternalAccount & Node & Object {\n  \"\"\"\n  The account this card belongs to. This attribute will not be in the card\n  object if the card belongs to a customer or recipient instead.\n  \"\"\"\n  account: String @expandable\n  \"\"\"City/District/Suburb/Town/Village.\"\"\"\n  address_city: String\n  \"\"\"Billing address country, if provided when creating card.\"\"\"\n  address_country: String\n  \"\"\"Address line 1 (Street address/PO Box/Company name).\"\"\"\n  address_line1: String\n  \"\"\"If `address_line1` was provided, results of the check: `pass`, `fail`, `unavailable`, or `unchecked`.\"\"\"\n  address_line1_check: Check\n  \"\"\"Address line 2 (Apartment/Suite/Unit/Building).\"\"\"\n  address_line2: String\n  \"\"\"State/County/Province/Region.\"\"\"\n  address_state: String\n  \"\"\"ZIP or postal code.\"\"\"\n  address_zip: String\n  \"\"\"If `address_zip` was provided, results of the check: `pass`, `fail`, `unavailable`, or `unchecked`.\"\"\"\n  address_zip_check: Check\n  \"\"\"\n  A set of available payout methods for this card. Will be either `[\"standard\"]`\n  or `[\"standard\", \"instant\"]`. Only values from this set should be passed as\n  the `method` when creating a transfer.\n  \"\"\"\n  available_payout_methods: [AvailablePayoutMethods]\n  \"\"\"Card brand. Can be `American Express`, `Diners Club`, `Discover`, `JCB`, `MasterCard`, `UnionPay`, `Visa`, or `Unknown`.\"\"\"\n  brand: Brand\n  \"\"\"\n  Two-letter ISO code representing the country of the card. You could use this\n  attribute to get a sense of the international breakdown of cards you've collected.\n  \"\"\"\n  country: CountryCode\n  \"\"\"Three-letter ISO code for currency. Only applicable on accounts (not customers or recipients). The card can be used as a transfer destination for funds in this currency.\"\"\"\n  currency: Currency\n  \"\"\"\n  The customer that this card belongs to. This attribute will not be in the card\n  object if the card belongs to an account or recipient instead.\n  \"\"\"\n  customer: String @expandable\n  \"\"\"If a CVC was provided, results of the check: `pass`, `fail`, `unavailable`, or `unchecked`.\"\"\"\n  cvc_check: Check\n  \"\"\"Whether this card is the default external account for its currency.\"\"\"\n  default_for_currency: Boolean\n  \"\"\"(For tokenized numbers only.) The last four digits of the device account number.\"\"\"\n  dynamic_last4: String\n  \"\"\"Two-digit number representing the card's expiration month.\"\"\"\n  exp_month: Int\n  \"\"\"Four-digit number representing the card's expiration year.\"\"\"\n  exp_year: Int\n  \"\"\"\n  Uniquely identifies this particular card number. You can use this attribute to\n  check whether two customers who've signed up with you are using the same card\n  number, for example.\n  \"\"\"\n  fingerprint: String\n  \"\"\"Card funding type. Can be `credit`, `debit`, `prepaid`, or `unknown`.\"\"\"\n  funding: Funding\n  \"\"\"Unique identifier for the object.\"\"\"\n  id: ID!\n  \"\"\"The last four digits of the card.\"\"\"\n  last4: String\n  \"\"\"\n  Set of key-value pairs that you can attach to an object. This can be useful\n  for storing additional information about the object in a structured format.\n  \"\"\"\n  metadata: JSON\n  \"\"\"Cardholder name.\"\"\"\n  name: String\n  \"\"\"String representing the object's type. Objects of the same type share the same value.\"\"\"\n  object: ObjectType\n  \"\"\"\n  The recipient that this card belongs to. This attribute will not be in the\n  card object if the card belongs to a customer or account instead.\n  \"\"\"\n  recipient: String @expandable\n  \"\"\"If the card number is tokenized, this is the method that was used. Can be `apple_pay` or `google_pay`.\"\"\"\n  tokenizationMethod: TokenizationMethod\n}\n\nenum CapabilitiesPayments {\n  active\n  inactive\n  pending\n}\n\n\"\"\"https://stripe.com/docs/api/subscriptions\"\"\"\ntype BillingSubscription implements Node & Object {\n  \"\"\"\n  A non-negative decimal between 0 and 100, with at most two decimal places.\n  This represents the percentage of the subscription invoice subtotal that will\n  be transferred to the application owner's Stripe account.\n  \"\"\"\n  application_fee_percent: Float\n  \"\"\"\n  Either `charge_automatically`, or `send_invoice`. When charging automatically,\n  Stripe will attempt to pay this subscription at the end of the cycle using the\n  default source attached to the customer. When sending an invoice, Stripe will\n  email your customer an invoice with payment instructions.\n  \"\"\"\n  billing: BillingSubscriptionBilling\n  \"\"\"\n  Determines the date of the first full invoice, and, for plans with `month` or\n  `year` intervals, the day of the month for subsequent invoices.\n  \"\"\"\n  billing_cycle_anchor: DateTime\n  \"\"\"Define thresholds at which an invoice will be sent, and the subscription advanced to a new billing period\"\"\"\n  billing_thresholds: BillingSubscriptionBillingThresholds\n  \"\"\"\n  If the subscription has been canceled with the `at_period_end` flag set to\n  `true`, `cancel_at_period_end` on the subscription will be true. You can use\n  this attribute to determine whether a subscription that has a status of active\n  is scheduled to be canceled at the end of the current period.\n  \"\"\"\n  cancel_at_period_end: Boolean\n  \"\"\"\n  If the subscription has been canceled, the date of that cancellation. If the\n  subscription was canceled with `cancel_at_period_end`, `canceled_at` will\n  still reflect the date of the initial cancellation request, not the end of the\n  subscription period when the subscription is automatically moved to a canceled state.\n  \"\"\"\n  canceled_at: DateTime\n  \"\"\"Time at which the object was created. Measured in seconds since the Unix epoch.\"\"\"\n  created: DateTime\n  \"\"\"\n  End of the current period that the subscription has been invoiced for. At the\n  end of this period, a new invoice will be created.\n  \"\"\"\n  current_period_end: DateTime\n  \"\"\"Start of the current period that the subscription has been invoiced for.\"\"\"\n  current_period_start: DateTime\n  \"\"\"ID of the customer who owns the subscription.\"\"\"\n  customer: Customer @expandable\n  \"\"\"\n  Number of days a customer has to pay invoices generated by this subscription.\n  This value will be `null` for subscriptions where\n  `billing=charge_automatically`.\n  \"\"\"\n  days_until_due: Int\n  \"\"\"\n  ID of the default payment source for the subscription. It must belong to the\n  customer associated with the subscription and be in a chargeable state. If not\n  set, defaults to the customer's default source.\n  \"\"\"\n  default_source: Source @expandable\n  \"\"\"\n  Describes the current discount applied to this subscription, if there is one.\n  When billing, a discount applied to a subscription overrides a discount\n  applied on a customer-wide basis.\n  \"\"\"\n  discount: Discount\n  \"\"\"If the subscription has ended, the date the subscription ended.\"\"\"\n  ended_at: DateTime\n  \"\"\"Unique identifier for the object.\"\"\"\n  id: ID!\n  \"\"\"List of subscription items, each with an attached plan.\"\"\"\n  items: BillingSubscriptionItemList\n  \"\"\"The most recent invoice this subscription has generated.\"\"\"\n  latest_invoice: Invoice @expandable\n  \"\"\"Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.\"\"\"\n  livemode: Boolean\n  \"\"\"\n  Set of key-value pairs that you can attach to an object. This can be useful\n  for storing additional information about the object in a structured format.\n  \"\"\"\n  metadata: JSON\n  \"\"\"String representing the object's type. Objects of the same type share the same value.\"\"\"\n  object: ObjectType\n  \"\"\"Hash describing the plan the customer is subscribed to. Only set if the subscription contains a single plan.\"\"\"\n  plan: Plan\n  \"\"\"\n  The quantity of the plan to which the customer is subscribed. For example, if\n  your plan is $10/user/month, and your customer has 5 users, you could pass 5\n  as the quantity to have the customer charged $50 (5 x $10) monthly. Only set\n  if the subscription contains a single plan.\n  \"\"\"\n  quantity: Int\n  \"\"\"\n  Date of the last substantial change to this subscription. For example, a\n  change to the items array, or a change of status, will reset this timestamp.\n  \"\"\"\n  start: DateTime\n  \"\"\"\n  Possible values are `incomplete`, `incomplete_expired`, `trialing`, `active`, `past_due`, `canceled`, or `unpaid`.\n  \n  For `billing=charge_automatically` a subscription moves into `incomplete` if\n  the initial payment attempt fails. A subscription in this state can only have\n  metadata and default_source updated. Once the first invoice is paid, the\n  subscription moves into an `active` state. If the first invoice is not paid\n  within 23 hours, the subscription transitions to `incomplete_expired`. This is\n  a terminal state, the open invoice will be voided and no further invoices will be generated.\n  \n  A subscription that is currently in a trial period is `trialing` and moves to `active` when the trial period is over.\n  \n  If subscription `billing=charge_automatically` it becomes `past_due` when\n  payment to renew it fails and `canceled` or `unpaid` (depending on your\n  subscriptions settings) when Stripe has exhausted all payment retry attempts.\n  \n  If subscription `billing=send_invoice` it becomes `past_due` when its invoice\n  is not paid by the due date, and `canceled` or `unpaid` if it is still not\n  paid by an additional deadline after that. Note that when a subscription has a\n  status of `unpaid`, no subsequent invoices will be attempted (invoices will be\n  created, but then immediately automatically closed). After receiving updated\n  payment information from a customer, you may choose to reopen and pay their\n  closed invoices.\n  \"\"\"\n  status: BillingSubscriptionStatus\n  \"\"\"If the subscription has a trial, the end of that trial.\"\"\"\n  trialEnd: DateTime\n  \"\"\"If the subscription has a trial, the beginning of that trial.\"\"\"\n  trialStart: DateTime\n}\n\ntype ExternalAccountList implements Object {\n  \"\"\"\n  The list contains all external accounts that have been attached to the Stripe\n  account. These may be bank accounts or cards.\n  \"\"\"\n  data: [ExternalAccount]\n  \"\"\"True if this list has another page of items after this one that can be fetched.\"\"\"\n  has_more: Boolean\n  \"\"\"String representing the object's type. Objects of the same type share the same value. Always has the value `list`.\"\"\"\n  object: ObjectType\n  \"\"\"The URL where this list can be accessed.\"\"\"\n  url: String\n}\n\ntype StandardAccount implements Account & Node & Object {\n  id: ID!\n  object: ObjectType\n  \"\"\"Optional information related to the business.\"\"\"\n  businessProfile: BusinessProfile\n  capabilities: AccountCapabilities\n  \"\"\"Whether the account can create live charges.\"\"\"\n  charges_enabled: Boolean\n  \"\"\"The account’s country\"\"\"\n  country: CountryCode\n  \"\"\"\n  Three-letter ISO currency code representing the default currency for the\n  account. This must be a currency that [Stripe supports in the account's\n  country](https://stripe.com/docs/payouts).\n  \"\"\"\n  default_currency: Currency\n  \"\"\"Whether account details have been submitted. Standard accounts cannot receive payouts before this is true.\"\"\"\n  details_submitted: Boolean\n  \"\"\"The primary user’s email address.\"\"\"\n  email: String\n  \"\"\"Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format.\"\"\"\n  metadata: JSON\n  \"\"\"Whether Stripe can send payouts to this account.\"\"\"\n  payouts_enabled: Boolean\n  \"\"\"Account options for customizing how the account functions within Stripe.\"\"\"\n  settings: AccountSettings\n  \"\"\"The Stripe account type. Can be standard, express, or custom.\"\"\"\n  type: AccountType\n}\n\ntype LoginLink implements Object {\n  \"\"\"Time at which the object was created. Measured in seconds since the Unix epoch.\"\"\"\n  created: DateTime\n  \"\"\"String representing the object’s type. Objects of the same type share the same value.\"\"\"\n  object: ObjectType\n  \"\"\"The URL for the login link.\"\"\"\n  url: String\n}\n\ntype AccountList implements Object {\n  object: ObjectType\n  data: [Account]\n  has_more: Boolean\n  url: String\n}\n\n\"\"\"No description available.\"\"\"\ntype BankAccountList implements Object {\n  data: [BankAccount]\n  \"\"\"True if this list has another page of items after this one that can be fetched.\"\"\"\n  has_more: Boolean\n  \"\"\"String representing the object's type. Objects of the same type share the same value. Always has the value `list`.\"\"\"\n  object: ObjectType\n  \"\"\"The URL where this list can be accessed.\"\"\"\n  url: String\n}\n\ntype File implements Node & Object {\n  \"\"\"Time at which the object was created. Measured in seconds since the Unix epoch.\"\"\"\n  created: DateTime\n  \"\"\"A filename for the file, suitable for saving to a filesystem.\"\"\"\n  filename: String\n  \"\"\"Unique identifier for the object.\"\"\"\n  id: ID!\n  links: FileLinkList\n  \"\"\"String representing the object's type. Objects of the same type share the same value.\"\"\"\n  object: ObjectType\n  \"\"\"\n  The purpose of the file. Possible values are `business_icon`, `business_logo`,\n  `customer_signature`, `dispute_evidence`, `finance_report_run`,\n  `founders_stock_document`, `identity_document`, `pci_document`,\n  `sigma_scheduled_query`, or `tax_document_user_upload`.\n  \"\"\"\n  purpose: Purpose\n  \"\"\"The size in bytes of the file object.\"\"\"\n  size: Float\n  \"\"\"A user friendly title for the document.\"\"\"\n  title: String\n  \"\"\"The URL from which the file can be downloaded using your live secret API key.\"\"\"\n  url: String\n  \"\"\"The type of the file returned (e.g., `csv`, `pdf`, `jpg`, or `png`).\"\"\"\n  type: FileType\n}\n\ntype FileList implements Object {\n  object: ObjectType\n  has_more: Boolean\n  url: String\n  data: [File]\n}\n\n\"\"\"\nTo share the contents of a File object with non-Stripe users, you can create a FileLink. FileLinks contain a URL that can be used to retrieve the contents of the file without authentication.\n\nhttps://stripe.com/docs/api/file_links\n\"\"\"\ntype FileLink implements Node & Object {\n  \"\"\"Unique identifier for the object.\"\"\"\n  id: ID!\n  \"\"\"String representing the object’s type. Objects of the same type share the same value.\"\"\"\n  object: ObjectType\n  \"\"\"Time at which the object was created. Measured in seconds since the Unix epoch.\"\"\"\n  created: DateTime\n  \"\"\"Whether this link is already expired.\"\"\"\n  expired: Boolean\n  \"\"\"Time at which the link expires.\"\"\"\n  expires_at: DateTime\n  \"\"\"The file object this link points to.\"\"\"\n  file: File @expandable\n  \"\"\"Has the value true if the object exists in live mode or the value false if the object exists in test mode.\"\"\"\n  livemode: Boolean\n  \"\"\"Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format.\"\"\"\n  metadata: JSON\n  \"\"\"The publicly accessible URL to download the file.\"\"\"\n  url: String\n}\n\ntype FileLinkList implements Object {\n  object: ObjectType\n  has_more: Boolean\n  url: String\n  data: [FileLink]\n}\n\ntype ExpressAccount implements Account & Node & Object {\n  id: ID!\n  object: ObjectType\n  \"\"\"Optional information related to the business.\"\"\"\n  businessProfile: BusinessProfile\n  capabilities: AccountCapabilities\n  \"\"\"Whether the account can create live charges.\"\"\"\n  charges_enabled: Boolean\n  \"\"\"The account’s country\"\"\"\n  country: CountryCode\n  \"\"\"\n  Three-letter ISO currency code representing the default currency for the\n  account. This must be a currency that [Stripe supports in the account's\n  country](https://stripe.com/docs/payouts).\n  \"\"\"\n  default_currency: Currency\n  \"\"\"Whether account details have been submitted. Standard accounts cannot receive payouts before this is true.\"\"\"\n  details_submitted: Boolean\n  \"\"\"The primary user’s email address.\"\"\"\n  email: String\n  \"\"\"Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format.\"\"\"\n  metadata: JSON\n  \"\"\"Whether Stripe can send payouts to this account.\"\"\"\n  payouts_enabled: Boolean\n  \"\"\"Account options for customizing how the account functions within Stripe.\"\"\"\n  settings: AccountSettings\n  \"\"\"The Stripe account type. Can be standard, express, or custom.\"\"\"\n  type: AccountType\n  \"\"\"Time at which the object was created. Measured in seconds since the Unix epoch.\"\"\"\n  created: DateTime\n  \"\"\"External accounts (bank accounts and debit cards) currently attached to this account\"\"\"\n  external_accounts: ExternalAccountList\n  \"\"\"Information about the requirements for the account, including what information needs to be collected, and by when.\"\"\"\n  requirements: AccountRequirements\n}\n\ntype CustomAccount implements Account & Node & Object {\n  id: ID!\n  object: ObjectType\n  \"\"\"Optional information related to the business.\"\"\"\n  businessProfile: BusinessProfile\n  capabilities: AccountCapabilities\n  \"\"\"Whether the account can create live charges.\"\"\"\n  charges_enabled: Boolean\n  \"\"\"The account’s country\"\"\"\n  country: CountryCode\n  \"\"\"\n  Three-letter ISO currency code representing the default currency for the\n  account. This must be a currency that [Stripe supports in the account's\n  country](https://stripe.com/docs/payouts).\n  \"\"\"\n  default_currency: Currency\n  \"\"\"Whether account details have been submitted. Standard accounts cannot receive payouts before this is true.\"\"\"\n  details_submitted: Boolean\n  \"\"\"The primary user’s email address.\"\"\"\n  email: String\n  \"\"\"Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format.\"\"\"\n  metadata: JSON\n  \"\"\"Whether Stripe can send payouts to this account.\"\"\"\n  payouts_enabled: Boolean\n  \"\"\"Account options for customizing how the account functions within Stripe.\"\"\"\n  settings: AccountSettings\n  \"\"\"The Stripe account type. Can be standard, express, or custom.\"\"\"\n  type: AccountType\n  \"\"\"Information about the company or business. This field is null unless business_type is set to company.\"\"\"\n  company: LegalEntityCompany\n  \"\"\"Time at which the object was created. Measured in seconds since the Unix epoch.\"\"\"\n  created: DateTime\n  \"\"\"External accounts (bank accounts and debit cards) currently attached to this account\"\"\"\n  external_accounts: ExternalAccountList\n  \"\"\"Information about the person represented by the account. This field is null unless business_type is set to individual.\"\"\"\n  individual: Person\n  \"\"\"Information about the requirements for the account, including what information needs to be collected, and by when.\"\"\"\n  requirements: AccountRequirements\n  \"\"\"Details on the acceptance of the Stripe Services Agreement\"\"\"\n  tos_acceptance: AccountTosAcceptance\n}\n\ntype Person implements Node & Object {\n  account: String\n  address: Address\n  address_kana: JapaneseAddress\n  address_kanji: JapaneseAddress\n  \"\"\"Time at which the object was created. Measured in seconds since the Unix epoch.\"\"\"\n  created: DateTime\n  dob: DateOfBirth\n  email: String\n  first_mame: String\n  first_name_kana: String\n  first_name_kanji: String\n  gender: String\n  \"\"\"Unique identifier for the object.\"\"\"\n  id: ID!\n  id_number_provided: Boolean\n  last_name: String\n  last_name_kana: String\n  last_name_kanji: String\n  maiden_name: String\n  \"\"\"\n  Set of key-value pairs that you can attach to an object. This can be useful\n  for storing additional information about the object in a structured format.\n  \"\"\"\n  metadata: JSON\n  \"\"\"String representing the object's type. Objects of the same type share the same value.\"\"\"\n  object: ObjectType\n  phone: String\n  relationship: PersonRelationship\n  requirements: PersonRequirements\n  ssn_last_4_provided: Boolean\n  verification: LegalEntityVerification\n}\n\n\"\"\"https://stripe.com/docs/api/subscription_items\"\"\"\ntype BillingSubscriptionItem implements Node & Object {\n  \"\"\"Define thresholds at which an invoice will be sent, and the related subscription advanced to a new billing period\"\"\"\n  billing_thresholds: BillingSubscriptionItemBillingThresholds\n  \"\"\"Time at which the object was created. Measured in seconds since the Unix epoch.\"\"\"\n  created: DateTime\n  \"\"\"Unique identifier for the object.\"\"\"\n  id: ID!\n  \"\"\"\n  Set of key-value pairs that you can attach to an object. This can be useful\n  for storing additional information about the object in a structured format.\n  \"\"\"\n  metadata: JSON\n  \"\"\"String representing the object's type. Objects of the same type share the same value.\"\"\"\n  object: ObjectType\n  plan: Plan\n  \"\"\"The [quantity](https://stripe.com/docs/subscriptions/quantities) of the plan to which the customer should be subscribed.\"\"\"\n  quantity: Int\n  \"\"\"The \\`subscription\\` this \\`subscription_item\\` belongs to.\"\"\"\n  subscription: ID\n}\n\n\"\"\"List of subscription items, each with an attached plan.\"\"\"\ntype BillingSubscriptionItemList implements Object {\n  data: [BillingSubscriptionItem]\n  \"\"\"True if this list has another page of items after this one that can be fetched.\"\"\"\n  has_more: Boolean\n  \"\"\"String representing the object's type. Objects of the same type share the same value. Always has the value `list`.\"\"\"\n  object: ObjectType\n  \"\"\"The URL where this list can be accessed.\"\"\"\n  url: String\n}\n\n\"\"\"https://stripe.com/docs/api/coupons/object\"\"\"\ntype Coupon implements Object {\n  \"\"\"Unique identifier for the object.\"\"\"\n  id: ID!\n  \"\"\"String representing the object’s type. Objects of the same type share the same value.\"\"\"\n  object: ObjectType\n  \"\"\"Amount (in the currency specified) that will be taken off the subtotal of any invoices for this customer.\"\"\"\n  amount_off: Int\n  created: DateTime\n  currency: Currency\n  \"\"\"Describes how long a customer who applies this coupon will get the discount.\"\"\"\n  duration: Duration\n  \"\"\"If duration is repeating, the number of months the coupon applies. Null if coupon duration is forever or once.\"\"\"\n  duration_in_months: Int\n  livemode: Boolean\n  \"\"\"Maximum number of times this coupon can be redeemed, in total, across all customers, before it is no longer valid.\"\"\"\n  max_redemptions: Int\n  metadata: JSON\n  \"\"\"Name of the coupon displayed to customers on for instance invoices or receipts.\"\"\"\n  name: String\n  \"\"\"Percent that will be taken off the subtotal of any invoices for this customer for the duration of the coupon. For example, a coupon with percent_off of 50 will make a $100 invoice $50 instead.\"\"\"\n  percent_off: Float\n  \"\"\"Date after which the coupon can no longer be redeemed.\"\"\"\n  redeem_by: DateTime\n  \"\"\"Number of times this coupon has been applied to a customer.\"\"\"\n  times_redeemed: Int\n  valid: Boolean\n}\n\ntype CouponList implements Object {\n  object: ObjectType\n  data: [Coupon]\n  has_more: Boolean\n  url: String\n}\n\ntype Plan implements Node & Object {\n  \"\"\"Whether the plan is currently available for new subscriptions.\"\"\"\n  active: Boolean\n  \"\"\"\n  Specifies a usage aggregation strategy for plans of `usage_type=metered`.\n  Allowed values are `sum` for summing up all usage during a period,\n  `last_during_period` for picking the last usage record reported within a\n  period, `last_ever` for picking the last usage record ever (across period\n  bounds) or `max` which picks the usage record with the maximum reported usage\n  during a period. Defaults to `sum`.\n  \"\"\"\n  aggregateUsage: AggregateUsage\n  \"\"\"The amount in %s to be charged on the interval specified.\"\"\"\n  amount: Float\n  \"\"\"\n  Describes how to compute the price per period. Either `per_unit` or `tiered`.\n  `per_unit` indicates that the fixed amount (specified in `amount`) will be\n  charged per unit in `quantity` (for plans with `usage_type=licensed`), or per\n  unit of total usage (for plans with `usage_type=metered`). `tiered` indicates\n  that the unit pricing will be computed using a tiering strategy as defined\n  using the `tiers` and `tiers_mode` attributes.\n  \"\"\"\n  billing_scheme: BillingScheme\n  \"\"\"Time at which the object was created. Measured in seconds since the Unix epoch.\"\"\"\n  created: DateTime\n  \"\"\"\n  Three-letter [ISO currency\n  code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be\n  a [supported currency](https://stripe.com/docs/currencies).\n  \"\"\"\n  currency: Currency\n  \"\"\"Unique identifier for the object.\"\"\"\n  id: ID!\n  \"\"\"One of `day`, `week`, `month` or `year`. The frequency with which a subscription should be billed.\"\"\"\n  interval: PlanInterval\n  \"\"\"\n  The number of intervals (specified in the `interval` property) between\n  subscription billings. For example, `interval=month` and `interval_count=3`\n  bills every 3 months.\n  \"\"\"\n  interval_count: Int\n  \"\"\"Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.\"\"\"\n  livemode: Boolean\n  \"\"\"\n  Set of key-value pairs that you can attach to an object. This can be useful\n  for storing additional information about the object in a structured format.\n  \"\"\"\n  metadata: JSON\n  \"\"\"A brief description of the plan, hidden from customers.\"\"\"\n  nickname: String\n  \"\"\"String representing the object's type. Objects of the same type share the same value.\"\"\"\n  object: ObjectType\n  \"\"\"The product whose pricing this plan determines.\"\"\"\n  product: Product @expandable\n  \"\"\"\n  Each element represents a pricing tier. This parameter requires\n  `billing_scheme` to be set to `tiered`. See also the documentation for\n  `billing_scheme`.\n  \"\"\"\n  tiers: [PlanTier]\n  \"\"\"\n  Defines if the tiering price should be `graduated` or `volume` based. In\n  `volume`-based tiering, the maximum quantity within a period determines the\n  per unit price, in `graduated` tiering pricing can successively change as the\n  quantity grows.\n  \"\"\"\n  tiers_mode: TiersMode\n  \"\"\"\n  Apply a transformation to the reported usage or set quantity before computing\n  the billed price. Cannot be combined with `tiers`.\n  \"\"\"\n  transform_usage: String\n  \"\"\"Default number of trial days when subscribing a customer to this plan using [`trial_from_plan=true`](https://stripe.com/docs/api#create_subscription-trial_from_plan).\"\"\"\n  trial_period_days: Int\n  \"\"\"\n  Configures how the quantity per period should be determined, can be either\n  `metered` or `licensed`. `licensed` will automatically bill the `quantity` set\n  for a plan when adding it to a subscription, `metered` will aggregate the\n  total usage based on usage records. Defaults to `licensed`.\n  \"\"\"\n  usage_type: UsageType\n}\n\n\"\"\"\nStore representations of products you sell in Product objects, used in conjunction with SKUs. Products may be physical goods, to be shipped, or digital.\n\nDocumentation on Products for use with Subscriptions can be found at Subscription Products.\nhttps://stripe.com/docs/api/products?lang=node\n\"\"\"\ntype Product implements Node & Object {\n  \"\"\"Whether the product is currently available for purchase.\"\"\"\n  active: Boolean\n  \"\"\"\n  A list of up to 5 attributes that each SKU can provide values for (e.g.,\n  \\`[\"color\", \"size\"]\\`). Only applicable to products of `type=good`.\n  \"\"\"\n  attributes: [String]\n  \"\"\"\n  A short one-line description of the product, meant to be displayable to the\n  customer. Only applicable to products of `type=good`.\n  \"\"\"\n  caption: String\n  \"\"\"Time at which the object was created. Measured in seconds since the Unix epoch.\"\"\"\n  created: DateTime\n  \"\"\"An array of connect application identifiers that cannot purchase this product. Only applicable to products of `type=good`.\"\"\"\n  deactivate_on: [String]\n  \"\"\"The product's description, meant to be displayable to the customer. Only applicable to products of `type=good`.\"\"\"\n  description: String\n  \"\"\"Unique identifier for the object.\"\"\"\n  id: ID!\n  \"\"\"\n  A list of up to 8 URLs of images for this product, meant to be displayable to\n  the customer. Only applicable to products of `type=good`.\n  \"\"\"\n  images: [String]\n  \"\"\"Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.\"\"\"\n  livemode: Boolean\n  \"\"\"\n  Set of key-value pairs that you can attach to an object. This can be useful\n  for storing additional information about the object in a structured format.\n  \"\"\"\n  metadata: JSON\n  \"\"\"The product's name, meant to be displayable to the customer. Applicable to both `service` and `good` types.\"\"\"\n  name: String\n  \"\"\"String representing the object's type. Objects of the same type share the same value.\"\"\"\n  object: ObjectType\n  \"\"\"\n  The dimensions of this product for shipping purposes. A SKU associated with\n  this product can override this value by having its own `package_dimensions`.\n  Only applicable to products of `type=good`.\n  \"\"\"\n  package_dimensions: PackageDimensions\n  \"\"\"Whether this product is a shipped good. Only applicable to products of `type=good`.\"\"\"\n  shippable: Boolean\n  \"\"\"\n  Extra information about a product which will appear on your customer's credit\n  card statement. In the case that multiple products are billed at once, the\n  first statement descriptor will be used. Only available on products of\n  type=`service`.\n  \"\"\"\n  statement_descriptor: String\n  \"\"\"\n  The type of the product. The product is either of type `good`, which is\n  eligible for use with Orders and SKUs, or `service`, which is eligible for use\n  with Subscriptions and Plans.\n  \"\"\"\n  type: ProductType\n  \"\"\"\n  A label that represents units of this product, such as seat(s), in Stripe and\n  on customers’ receipts and invoices. Only available on products of\n  type=`service`.\n  \"\"\"\n  unit_label: String\n  updated: DateTime\n  \"\"\"A URL of a publicly-accessible webpage for this product. Only applicable to products of `type=good`.\"\"\"\n  url: String\n}\n\n\"\"\"\nInvoices are statements of amounts owed by a customer, and are either generated one-off, or generated periodically from a subscription.\n\nThey contain invoice items, and proration adjustments that may be caused by subscription upgrades/downgrades (if necessary).\n\nIf your invoice is configured to be billed through automatic charges, Stripe automatically finalizes your invoice and attempts payment. Note that finalizing the invoice, when automatic, does not happen immediately as the invoice is created. Stripe waits until one hour after the last webhook was successfully sent (or the last webhook timed out after failing). If you (and the platforms you may have connected to) have no webhooks configured, Stripe waits one hour after creation to finalize the invoice.\n\nIf your invoice is configured to be billed by sending an email, then based on your email settings, Stripe will email the invoice to your customer and await payment. These emails can contain a link to a hosted page to pay the invoice.\n\nStripe applies any customer credit on the account before determining the amount due for the invoice (i.e., the amount that will be actually charged). If the amount due for the invoice is less than Stripe's minimum allowed charge per currency, the invoice is automatically marked paid, and we add the amount due to the customer's running account balance which is applied to the next invoice.\n\nMore details on the customer's account balance are here.\n\"\"\"\ntype Invoice implements Node & Object {\n  \"\"\"\n  Final amount due at this time for this invoice. If the invoice's total is\n  smaller than the minimum charge amount, for example, or if there is account\n  credit that can be applied to the invoice, the \\`amount_due\\` may be 0. If there\n  is a positive \\`starting_balance\\` for the invoice (the customer owes money),\n  the \\`amount_due\\` will also take that into account. The charge that gets\n  generated for the invoice will be for the amount specified in \\`amount_due\\`.\n  \"\"\"\n  amount_due: Int\n  \"\"\"The amount, in %s, that was paid.\"\"\"\n  amount_paid: Int\n  \"\"\"The amount remaining, in %s, that is due.\"\"\"\n  amount_remaining: Int\n  \"\"\"\n  The fee in %s that will be applied to the invoice and transferred to the\n  application owner's Stripe account when the invoice is paid.\n  \"\"\"\n  application_fee_amount: Int\n  \"\"\"\n  Number of payment attempts made for this invoice, from the perspective of the\n  payment retry schedule. Any payment attempt counts as the first attempt, and\n  subsequently only automatic retries increment the attempt count. In other\n  words, manual payment attempts after the first attempt do not affect the retry schedule.\n  \"\"\"\n  attempt_count: Int\n  \"\"\"\n  Whether an attempt has been made to pay the invoice. An invoice is not\n  attempted until 1 hour after the \\`invoice.created\\` webhook, for example, so\n  you might not want to display that invoice as unpaid to your users.\n  \"\"\"\n  attempted: Boolean\n  \"\"\"\n  Controls whether Stripe will perform [automatic\n  collection](https://stripe.com/docs/billing/invoices/workflow/#auto_advance)\n  of the invoice. When \\`false\\`, the invoice's state will not automatically\n  advance without an explicit action.\n  \"\"\"\n  auto_advance: Boolean\n  \"\"\"\n  Either \\`charge_automatically\\`, or \\`send_invoice\\`. When charging automatically,\n  Stripe will attempt to pay this invoice using the default source attached to\n  the customer. When sending an invoice, Stripe will email this invoice to the\n  customer with payment instructions.\n  \"\"\"\n  billing: InvoiceBilling\n  \"\"\"\n  Indicates the reason why the invoice was created. \\`subscription_cycle\\`\n  indicates an invoice created by a subscription advancing into a new period.\n  \\`subscription_create\\` indicates an invoice created due to creating a\n  subscription. \\`subscription_update\\` indicates an invoice created due to\n  updating a subscription. \\`subscription\\` is set for all old invoices to\n  indicate either a change to a subscription or a period advancement. \\`manual\\`\n  is set for all invoices unrelated to a subscription (for example: created via\n  the invoice editor). The \\`upcoming\\` value is reserved for simulated invoices\n  per the upcoming invoice endpoint. \\`subscription_threshold\\` indicates an\n  invoice created due to a billing threshold being reached.\n  \"\"\"\n  billing_reason: InvoiceBillingReason\n  \"\"\"ID of the latest charge generated for this invoice, if any.\"\"\"\n  charge: Charge @expandable\n  \"\"\"Time at which the object was created. Measured in seconds since the Unix epoch.\"\"\"\n  created: DateTime\n  \"\"\"\n  Three-letter [ISO currency\n  code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be\n  a [supported currency](https://stripe.com/docs/currencies).\n  \"\"\"\n  currency: Currency\n  \"\"\"Custom fields displayed on the invoice.\"\"\"\n  custom_fields: [InvoiceSettingCustomField]\n  customer: Customer @expandable\n  \"\"\"\n  ID of the default payment source for the invoice. It must belong to the\n  customer associated with the invoice and be in a chargeable state. If not set,\n  defaults to the subscription's default source, if any, or to the customer's\n  default source.\n  \"\"\"\n  default_source: Source @expandable\n  \"\"\"An arbitrary string attached to the object. Often useful for displaying to users. Referenced as 'memo' in the Dashboard.\"\"\"\n  description: String\n  discount: Discount\n  \"\"\"\n  The date on which payment for this invoice is due. This value will be \\`null\\`\n  for invoices where \\`billing=charge_automatically\\`.\n  \"\"\"\n  due_date: DateTime\n  \"\"\"\n  Ending customer balance after the invoice is finalized. Invoices are finalized\n  approximately an hour after successful webhook delivery or when payment\n  collection is attempted for the invoice. If the invoice has not been finalized\n  yet, this will be null.\n  \"\"\"\n  ending_balance: Int\n  \"\"\"Footer displayed on the invoice.\"\"\"\n  footer: String\n  \"\"\"\n  The URL for the hosted invoice page, which allows customers to view and pay an\n  invoice. If the invoice has not been finalized yet, this will be null.\n  \"\"\"\n  hosted_invoice_url: String\n  \"\"\"Unique identifier for the object.\"\"\"\n  id: ID!\n  \"\"\"The link to download the PDF for the invoice. If the invoice has not been finalized yet, this will be null.\"\"\"\n  invoice_pdf: String\n  \"\"\"\n  The individual line items that make up the invoice. \\`lines\\` is sorted as\n  follows: invoice items in reverse chronological order, followed by the\n  subscription, if any.\n  \"\"\"\n  lines: LineItemList\n  \"\"\"Has the value \\`true\\` if the object exists in live mode or the value \\`false\\` if the object exists in test mode.\"\"\"\n  livemode: Boolean\n  \"\"\"\n  Set of key-value pairs that you can attach to an object. This can be useful\n  for storing additional information about the object in a structured format.\n  \"\"\"\n  metadata: JSON\n  \"\"\"The time at which payment will next be attempted. This value will be \\`null\\` for invoices where \\`billing=send_invoice\\`.\"\"\"\n  nextPaymentAttempt: Int\n  \"\"\"\n  A unique, identifying string that appears on emails sent to the customer for\n  this invoice. This starts with the customer's unique invoice_prefix if it is specified.\n  \"\"\"\n  number: String\n  \"\"\"String representing the object's type. Objects of the same type share the same value.\"\"\"\n  object: ObjectType\n  \"\"\"\n  Whether payment was successfully collected for this invoice. An invoice can be\n  paid (most commonly) with a charge or with credit from the customer's account balance.\n  \"\"\"\n  paid: Boolean\n  \"\"\"End of the usage period during which invoice items were added to this invoice.\"\"\"\n  period_end: DateTime\n  \"\"\"Start of the usage period during which invoice items were added to this invoice.\"\"\"\n  period_start: DateTime\n  \"\"\"This is the transaction number that appears on email receipts sent for this invoice.\"\"\"\n  receipt_number: String\n  \"\"\"\n  Starting customer balance before the invoice is finalized. If the invoice has\n  not been finalized yet, this will be the current customer balance.\n  \"\"\"\n  starting_balance: Float\n  \"\"\"Extra information about an invoice for the customer's credit card statement.\"\"\"\n  statement_descriptor: String\n  \"\"\"The status of the invoice, one of \\`draft\\`, \\`open\\`, \\`paid\\`, \\`uncollectible\\`, or \\`void\\`.\"\"\"\n  status: InvoiceStatus\n  status_transitions: InvoicesStatusTransitions\n  \"\"\"The subscription that this invoice was prepared for, if any.\"\"\"\n  subscription: BillingSubscription @expandable\n  \"\"\"Only set for upcoming invoices that preview prorations. The time used to calculate prorations.\"\"\"\n  subscription_proration_date: Int\n  \"\"\"Total of all subscriptions, invoice items, and prorations on the invoice before any discount is applied.\"\"\"\n  subtotal: Int\n  \"\"\"\n  The amount of tax included in the total, calculated from \\`tax_percent\\` and the\n  subtotal. If no \\`tax_percent\\` is defined, this value will be null.\n  \"\"\"\n  tax: Int\n  \"\"\"\n  This percentage of the subtotal has been added to the total amount of the\n  invoice, including invoice line items and discounts. This field is inherited\n  from the subscription's \\`tax_percent\\` field, but can be changed before the\n  invoice is paid. This field defaults to null.\n  \"\"\"\n  tax_percent: Float\n  \"\"\"If billing_reason is set to subscription_threshold this returns more information on which threshold rules triggered the invoice.\"\"\"\n  threshold_reason: InvoiceThresholdReason\n  \"\"\"Total after discount.\"\"\"\n  total: Int\n  \"\"\"\n  The time at which webhooks for this invoice were successfully delivered (if\n  the invoice had no webhooks to deliver, this will match \\`created\\`). Invoice\n  payment is delayed until webhooks are delivered, or until all webhook delivery\n  attempts have been exhausted.\n  \"\"\"\n  webhooks_delivered_at: DateTime\n}\n\n\"\"\"\nThe individual line items that make up the invoice. \\`lines\\` is sorted as\nfollows: invoice items in reverse chronological order, followed by the\nsubscription, if any.\n\"\"\"\ntype LineItemList implements Object {\n  data: [LineItem]\n  \"\"\"True if this list has another page of items after this one that can be fetched.\"\"\"\n  has_more: Boolean\n  \"\"\"String representing the object's type. Objects of the same type share the same value. Always has the value \\`list\\`.\"\"\"\n  object: ObjectType\n  \"\"\"The URL where this list can be accessed.\"\"\"\n  url: String\n}\n\ntype LineItem implements Node & Object {\n  \"\"\"The amount, in %s.\"\"\"\n  amount: Float\n  \"\"\"\n  Three-letter [ISO currency\n  code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be\n  a [supported currency](https://stripe.com/docs/currencies).\n  \"\"\"\n  currency: Currency\n  \"\"\"An arbitrary string attached to the object. Often useful for displaying to users.\"\"\"\n  description: String\n  \"\"\"If true, discounts will apply to this line item. Always false for prorations.\"\"\"\n  discountable: Boolean\n  \"\"\"Unique identifier for the object.\"\"\"\n  id: ID!\n  invoiceItem: String\n  \"\"\"Whether this is a test line item.\"\"\"\n  livemode: Boolean\n  \"\"\"\n  Set of key-value pairs that you can attach to an object. This can be useful\n  for storing additional information about the object in a structured format.\n  Note that for line items with \\`type=subscription\\` this will reflect the\n  metadata of the subscription that caused the line item to be created.\n  \"\"\"\n  metadata: JSON\n  \"\"\"String representing the object's type. Objects of the same type share the same value.\"\"\"\n  object: ObjectType\n  period: InvoiceLineItemPeriod\n  \"\"\"The plan of the subscription, if the line item is a subscription or a proration.\"\"\"\n  plan: Plan\n  \"\"\"Whether this is a proration.\"\"\"\n  proration: Boolean\n  \"\"\"The quantity of the subscription, if the line item is a subscription or a proration.\"\"\"\n  quantity: Int\n  \"\"\"The subscription that the invoice item pertains to, if any.\"\"\"\n  subscription: String\n  \"\"\"\n  The subscription item that generated this invoice item. Left empty if the line\n  item is not an explicit result of a subscription.\n  \"\"\"\n  subscription_item: String\n  \"\"\"A string identifying the type of the source of this line item, either an \\`invoiceitem\\` or a \\`subscription\\`.\"\"\"\n  type: InvoiceType\n}\n\ntype InvoiceDeletePayload implements Object {\n  object: ObjectType\n  deleted: Boolean\n}\n\ntype InvoiceList implements Object {\n  object: ObjectType\n  has_more: Boolean\n  url: String\n  data: [Invoice]\n}\n\n\"\"\"To charge a credit or a debit card, you create a Charge object. You can retrieve and refund individual charges as well as list all charges. Charges are identified by a unique, random ID.\"\"\"\ntype Charge implements Node & Object {\n  \"\"\"Unique identifier for the object.\"\"\"\n  id: ID!\n  \"\"\"String representing the object’s type. Objects of the same type share the same value.\"\"\"\n  object: ObjectType!\n  \"\"\"A positive integer in the smallest currency unit (e.g., 100 cents to charge $1.00 or 100 to charge ¥100, a zero-decimal currency) representing how much to charge. The minimum amount is $0.50 US or equivalent in charge currency.\"\"\"\n  amount: Float\n  \"\"\"Amount in cents refunded (can be less than the amount attribute on the charge if a partial refund was issued).\"\"\"\n  amount_refunded: Int\n  application: String\n  application_fee: String\n  application_fee_amount: Int\n  balance_transaction: String\n  captured: Boolean\n  created: DateTime\n  currency: Currency\n  \"\"\"ID of the customer this charge is for if one exists.\"\"\"\n  customer: Customer @expandable\n  description: String\n  destination: String\n  dispute: String\n  failure_code: String\n  failure_message: String\n  fraud_details: FraudDetails\n  invoice: ID\n  livemode: Boolean\n  metadata: JSON\n  \"\"\"The account (if any) the charge was made on behalf of without triggering an automatic transfer. See the Connect documentation for details.\"\"\"\n  on_behalf_of: String\n  order: ID\n  outcome: ChargeOutcome\n  paid: Boolean\n  payment_intent: ID\n  receipt_email: String\n  receipt_number: String\n  refunded: Boolean\n  refunds: RefundList\n  review: String @expandable\n  shipping: ChargeShipping\n  source: Card\n  source_transfer: String @expandable\n  statement_descriptor: String\n  status: ChargeStatus\n  transfer: ID @expandable\n  transfer_data: TransferData\n  \"\"\"A string that identifies this transaction as part of a group. See the Connect documentation for details.\"\"\"\n  transfer_group: String\n}\n\ntype ChargeList implements Object {\n  object: ObjectType\n  url: String\n  has_more: Boolean\n  data: [Charge]\n}\n\ntype Refund implements Node & Object {\n  \"\"\"Unique identifier for the object.\"\"\"\n  id: ID!\n  \"\"\"String representing the object’s type. Objects of the same type share the same value.\"\"\"\n  object: ObjectType\n  \"\"\"Amount, in cents.\"\"\"\n  amount: Float\n  \"\"\"Balance transaction that describes the impact on your account balance.\"\"\"\n  balance_transaction: BalanceTransaction @expandable\n  \"\"\"ID of the charge that was refunded.\"\"\"\n  charge: ID @expandable\n  \"\"\"Time at which the object was created. Measured in seconds since the Unix epoch.\"\"\"\n  created: DateTime\n  \"\"\"Three-letter ISO currency code, in lowercase. Must be a supported currency.\"\"\"\n  currency: Currency\n  \"\"\"An arbitrary string attached to the object. Often useful for displaying to users. (Available on non-card refunds only)\"\"\"\n  description: String\n  \"\"\"If the refund failed, this balance transaction describes the adjustment made on your account balance that reverses the initial balance transaction.\"\"\"\n  failure_balance_transaction: BalanceTransaction @expandable\n  \"\"\"\n  If the refund failed, the reason for refund failure if known. Possible values\n  are `lost_or_stolen_card`, `expired_or_canceled_card`, or `unknown`.\n  \"\"\"\n  failure_reason: FailureReason\n  \"\"\"\n  Set of key-value pairs that you can attach to an object. This can be useful\n  for storing additional information about the object in a structured format.\n  \"\"\"\n  metadata: JSON\n  \"\"\"Reason for the refund. If set, possible values are duplicate, fraudulent, and requested_by_customer\"\"\"\n  reason: RefundReason\n  \"\"\"This is the transaction number that appears on email receipts sent for this refund.\"\"\"\n  receipt_number: String\n  \"\"\"The transfer reversal that is associated with the refund. Only present if the charge came from another Stripe account. See the Connect documentation for details.\"\"\"\n  source_transfer_reversal: String @expandable\n  \"\"\"Status of the refund. For credit card refunds, this can be succeeded or failed. For other types of refunds, it can be pending, succeeded, failed, or canceled. Refer to our refunds documentation for more details.\"\"\"\n  status: RefundStatus\n  \"\"\"If the accompanying transfer was reversed, the transfer reversal object. Only applicable if the charge was created using the destination parameter.\"\"\"\n  transfer_reversal: String @expandable\n}\n\n\"\"\"https://stripe.com/docs/api/balance\"\"\"\ntype Balance implements Object {\n  \"\"\"Funds that are available to be transferred or paid out, whether automatically by Stripe or explicitly via the [Transfers API](#transfers) or [Payouts API](#payouts). The available balance for each currency and payment type can be found in the `source_types` property.\"\"\"\n  available: [Fund]\n  \"\"\"Funds held due to negative balances on connected Custom accounts. The connect reserve balance for each currency and payment type can be found in the source_types property.\"\"\"\n  connect_reserverd: [Fund]\n  \"\"\"Has the value true if the object exists in live mode or the value false if the object exists in test mode.\"\"\"\n  livemode: Boolean\n  \"\"\"Funds that are not yet available in the balance, due to the 7-day rolling pay cycle. The pending balance for each currency, and for each payment type, can be found in the source_types property.\"\"\"\n  pending: [Fund]\n  \"\"\"String representing the object’s type. Objects of the same type share the same value.\"\"\"\n  object: ObjectType\n}\n\n\"\"\"https://stripe.com/docs/api/balance/balance_transaction\"\"\"\ntype BalanceTransaction implements Node & Object {\n  id: ID!\n  amount: Int\n  available_on: DateTime\n  created: DateTime\n  currency: Currency\n  description: String\n  exchange_rate: Float\n  \"\"\"Fees (in cents) paid for this transaction.\"\"\"\n  fee: Int\n  \"\"\"Detailed breakdown of fees (in cents) paid for this transaction.\"\"\"\n  fee_details: [FeeDetail]\n  \"\"\"Net amount of the transaction, in cents.\"\"\"\n  net: Int\n  object: ObjectType\n  \"\"\"The Stripe object to which this transaction is related.\"\"\"\n  source: String\n  \"\"\"If the transaction’s net funds are available in the Stripe balance yet. Either available or pending.\"\"\"\n  status: BalanceTransactionStatus\n  \"\"\"\n  https://stripe.com/docs/reporting/balance-transaction-types\n  \n  Transaction type: `adjustment`, `advance`, `advance_funding`,\n  `application_fee`, `application_fee_refund`, `charge`,\n  `connect_collection_transfer`, `issuing_authorization_hold`,\n  `issuing_authorization_release`, `issuing_transaction`, `payment`,\n  `payment_failure_refund`, `payment_refund`, `payout`, `payout_cancel`,\n  `payout_failure`, `refund`, `refund_failure`, `reserve_transaction`,\n  `reserved_funds`, `stripe_fee`, `stripe_fx_fee`, `tax_fee`, `topup`,\n  `topup_reversal`, `transfer`, `transfer_cancel`, `transfer_failure`, or\n  `transfer_refund`. [Learn\n  more](https://stripe.com/docs/reporting/balance-transaction-types) about\n  balance transaction types and what they represent.\n  \"\"\"\n  type: BalanceTransactionType\n}\n\n\"\"\"Sometimes you want to add a charge or credit to a customer, but actually charge or credit the customer's card only at the end of a regular billing cycle. This is useful for combining several charges (to minimize per-transaction fees), or for having Stripe tabulate your usage-based billing totals.\"\"\"\ntype InvoiceItem implements Node & Object {\n  \"\"\"Amount (in the [currency] specified) of the invoice item. This should always be equal to [unit_amount * quantity`.\"\"\"\n  amount: Int\n  \"\"\"\n  Three-letter [ISO currency\n  code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be\n  a [supported currency](https://stripe.com/docs/currencies).\n  \"\"\"\n  currency: String\n  \"\"\"The ID of the customer who will be billed when this invoice item is billed.\"\"\"\n  customer: Customer @expandable\n  date: Int\n  \"\"\"An arbitrary string attached to the object. Often useful for displaying to users.\"\"\"\n  description: String\n  \"\"\"If true, discounts will apply to this invoice item. Always false for prorations.\"\"\"\n  discountable: Boolean\n  \"\"\"Unique identifier for the object.\"\"\"\n  id: ID!\n  \"\"\"The ID of the invoice this invoice item belongs to.\"\"\"\n  invoice: Invoice @expandable\n  \"\"\"Has the value [true] if the object exists in live mode or the value [false] if the object exists in test mode.\"\"\"\n  livemode: Boolean\n  \"\"\"\n  Set of key-value pairs that you can attach to an object. This can be useful\n  for storing additional information about the object in a structured format.\n  \"\"\"\n  metadata: JSON\n  \"\"\"String representing the object's type. Objects of the same type share the same value.\"\"\"\n  object: ObjectType\n  period: Period\n  \"\"\"If the invoice item is a proration, the plan of the subscription that the proration was computed for.\"\"\"\n  plan: Plan\n  \"\"\"Whether the invoice item was created automatically as a proration adjustment when the customer switched plans.\"\"\"\n  proration: Boolean\n  \"\"\"\n  Quantity of units for the invoice item. If the invoice item is a proration,\n  the quantity of the subscription that the proration was computed for.\n  \"\"\"\n  quantity: Int\n  \"\"\"The subscription that this invoice item has been created for, if any.\"\"\"\n  subscription: BillingSubscription @expandable\n  subscription_item: ID\n  \"\"\"Unit Amount (in the [currency] specified) of the invoice item.\"\"\"\n  unit_amount: Int\n}\n\ntype InvoiceItemList implements Object {\n  data: [InvoiceItem]\n  \"\"\"True if this list has another page of items after this one that can be fetched.\"\"\"\n  has_more: Boolean\n  \"\"\"String representing the object's type. Objects of the same type share the same value. Always has the value `list`.\"\"\"\n  object: ObjectType\n  \"\"\"The URL where this list can be accessed.\"\"\"\n  url: String\n}\n\ntype InvoiceItemDeletePayload implements Object {\n  object: ObjectType\n  deleted: Boolean\n}\n\ntype CodeVerification {\n  \"\"\"The number of attempts remaining to authenticate the source object with a verification code.\"\"\"\n  attemps_remainig: Int\n  \"\"\"The status of the code verification, either pending (awaiting verification, attempts_remaining should be greater than 0), succeeded (successful verification) or failed (failed verification, cannot be verified anymore as attempts_remaining should be 0).\"\"\"\n  status: CodeVerificationStatus\n}\n\n\"\"\"The authentication flow of the source.\"\"\"\nenum Flow {\n  redirect\n  receiver\n  code_verification\n  none\n}\n\ntype Owner {\n  \"\"\"Owner’s address.\"\"\"\n  address: Address\n  \"\"\"Owner’s email address.\"\"\"\n  email: String\n  \"\"\"Owner’s full name.\"\"\"\n  name: String\n  \"\"\"Owner’s phone number (including extension).\"\"\"\n  phone: String\n  \"\"\"Verified owner’s address. Verified values are verified or provided by the payment method directly (and if supported) at the time of authorization or settlement. They cannot be set or mutated.\"\"\"\n  verified_address: Address\n  \"\"\"Verified owner’s email address. Verified values are verified or provided by the payment method directly (and if supported) at the time of authorization or settlement. They cannot be set or mutated.\"\"\"\n  verified_email: String\n  \"\"\"Verified owner’s full name. Verified values are verified or provided by the payment method directly (and if supported) at the time of authorization or settlement. They cannot be set or mutated.\"\"\"\n  verified_name: String\n  \"\"\"Verified owner’s phone number (including extension). Verified values are verified or provided by the payment method directly (and if supported) at the time of authorization or settlement. They cannot be set or mutated.\"\"\"\n  verified_phone: String\n}\n\ntype Receiver {\n  \"\"\"The address of the receiver source. This is the value that should be communicated to the customer to send their funds to.\"\"\"\n  address: String\n  \"\"\"The total amount that was charged by you. The amount charged is expressed in the source’s currency.\"\"\"\n  amount_charged: Int\n  \"\"\"The total amount received by the receiver source. amount_received = amount_returned + amount_charged is true at all time. The amount received is expressed in the source’s currency.\"\"\"\n  amount_received: Int\n  \"\"\"The total amount that was returned to the customer. The amount returned is expressed in the source’s currency.\"\"\"\n  amount_returned: Int\n  \"\"\"Type of refund attribute method, one of email, manual, or none.\"\"\"\n  refund_attributes_method: RefundAttributesMethod\n  \"\"\"Type of refund attribute status, one of missing, requested, or available.\"\"\"\n  refund_attributes_status: RefundAttributesStatus\n}\n\n\"\"\"\"\"\"\ntype Redirect {\n  \"\"\"The failure reason for the redirect, either user_abort (the customer aborted or dropped out of the redirect flow), declined (the authentication failed or the transaction was declined), or processing_error (the redirect failed due to a technical error). Present only if the redirect status is failed.\"\"\"\n  failure_reason: FailureReason\n  \"\"\"The URL you provide to redirect the customer to after they authenticated their payment.\"\"\"\n  return_url: String\n  \"\"\"The status of the redirect, either pending (ready to be used by your customer to authenticate the transaction), succeeded (succesful authentication, cannot be reused) or not_required (redirect should not be used) or failed (failed authentication, cannot be reused).\"\"\"\n  status: RedirectStatus\n  \"\"\"The URL provided to you to redirect a customer to as part of a redirect authentication flow.\"\"\"\n  url: String\n}\n\n\"\"\"The status of the source, one of canceled, chargeable, consumed, failed, or pending. Only chargeable sources can be used to create a charge.\"\"\"\nenum SourceStatus {\n  CANCELED\n  CHARGEABLE\n  CONSUMED\n  FAILED\n  PENDING\n}\n\nenum SourceUsage {\n  reusable\n  single_use\n}\n\nenum SourceType {\n  ach_credit_transfer\n  ach_debit\n  alipay\n  bancontact\n  card\n  card_present\n  eps\n  giropay\n  ideal\n  multibanco\n  p24\n  paper_check\n  sepa_credit_transfer\n  sepa_debit\n  sofort\n  three_d_secure\n  wechat\n}\n\n\"\"\"https://stripe.com/docs/sources/ach-credit-transfer\"\"\"\ntype AchCreditTransfer {\n  account_number: String\n  routing_number: Int\n  fingerprint: String\n  bank_name: String\n  swift_code: String\n}\n\n\"\"\"https://stripe.com/docs/sources/alipay\"\"\"\ntype Alipay {\n  statement_descriptor: String\n  native_url: String\n}\n\n\"\"\"https://stripe.com/docs/sources/bancontact\"\"\"\ntype Bancontact {\n  bank_code: String\n  bic: String\n  bank_name: String\n  iban_last4: Int\n  statement_descriptor: String\n  preferred_language: String\n}\n\n\"\"\"https://stripe.com/docs/sources/eps\"\"\"\ntype EPS {\n  reference: String\n  statement_descriptor: String\n}\n\n\"\"\"https://stripe.com/docs/sources/giropay\"\"\"\ntype Giropay {\n  bank_code: String\n  bic: String\n  bank_name: String\n  statement_descriptor: String\n}\n\n\"\"\"https://stripe.com/docs/sources/ideal\"\"\"\ntype iDEAL {\n  bank: String\n  bic: String\n  iban_last4: Int\n  statement_descriptor: String\n}\n\n\"\"\"https://stripe.com/docs/sources/multibanco\"\"\"\ntype Multibanco {\n  reference: Int\n  entity: Int\n}\n\n\"\"\"https://stripe.com/docs/sources/p24\"\"\"\ntype Przelewy24 {\n  reference: String\n}\n\n\"\"\"https://stripe.com/docs/sources/sepa-debit\"\"\"\ntype SEPADirectDebit {\n  bank_code: Int\n  country: CountryCode\n  fingerprint: String\n  last4: Int\n  mandate_reference: String\n  mandate_url: String\n}\n\n\"\"\"https://stripe.com/docs/sources/sofort\"\"\"\ntype SOFORT {\n  country: CountryCode\n  bank_code: String\n  bic: String\n  bank_name: String\n  iban_last4: Int\n  preferred_language: String\n  statement_descriptor: String\n}\n\n\"\"\"https://stripe.com/docs/sources/wechat-pay\"\"\"\ntype WeChatPay {\n  qr_code_url: String\n}\n\ndirective @expandable on FIELD_DEFINITION\n\ninterface ExternalAccount {\n  \"\"\"Whether this bank account is the default external account for its currency.\"\"\"\n  default_for_currency: Boolean\n}\n\nenum BankAccountStatus {\n  new\n  validated\n  verified\n  verification_failed\n  errored\n}\n\nenum Check {\n  pass\n  fail\n  unavailable\n  unchecked\n}\n\nenum AvailablePayoutMethods {\n  standard\n  instant\n}\n\nenum Brand {\n  AmericanExpress\n  DinersClub\n  Discover\n  JCB\n  MasterCard\n  UnionPay\n  Visa\n  Unknown\n}\n\nenum Funding {\n  credit\n  debit\n  prepaid\n  unknown\n}\n\nenum TokenizationMethod {\n  apple_pay\n  google_pay\n}\n\nenum BillingSubscriptionBilling {\n  chargeAutomatically\n  sendInvoice\n}\n\n\"\"\"Define thresholds at which an invoice will be sent, and the subscription advanced to a new billing period\"\"\"\ntype BillingSubscriptionBillingThresholds {\n  \"\"\"Monetary threshold that triggers the subscription to create an invoice\"\"\"\n  amount_gte: Float\n  \"\"\"Indicates if the billing_cycle_anchor should be reset when a threshold is reached. If true, billing_cycle_anchor will be updated to the date/time the threshold was last reached; otherwise, the value will remain unchanged. This value may not be true if the subscription contains items with plans that have aggregate_usage=last_ever.\"\"\"\n  reset_billing_cycle_anchor: Boolean\n}\n\nenum BillingSubscriptionStatus {\n  active\n  canceled\n  incomplete\n  incompleteExpired\n  pastDue\n  trialing\n  unpaid\n}\n\ninterface Account {\n  id: ID\n  object: ObjectType\n  \"\"\"Optional information related to the business.\"\"\"\n  businessProfile: BusinessProfile\n  capabilities: AccountCapabilities\n  \"\"\"Whether the account can create live charges.\"\"\"\n  charges_enabled: Boolean\n  \"\"\"The account’s country\"\"\"\n  country: CountryCode\n  \"\"\"\n  Three-letter ISO currency code representing the default currency for the\n  account. This must be a currency that [Stripe supports in the account's\n  country](https://stripe.com/docs/payouts).\n  \"\"\"\n  default_currency: Currency\n  \"\"\"Whether account details have been submitted. Standard accounts cannot receive payouts before this is true.\"\"\"\n  details_submitted: Boolean\n  \"\"\"The primary user’s email address.\"\"\"\n  email: String\n  \"\"\"Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format.\"\"\"\n  metadata: JSON\n  \"\"\"Whether Stripe can send payouts to this account.\"\"\"\n  payouts_enabled: Boolean\n  \"\"\"Account options for customizing how the account functions within Stripe.\"\"\"\n  settings: AccountSettings\n  \"\"\"The Stripe account type. Can be standard, express, or custom.\"\"\"\n  type: AccountType\n}\n\ntype BusinessProfile {\n  \"\"\"The merchant category code for the account. MCCs are used to classify businesses based on the goods or services they provide. This can be unset by updating the value to null and then saving.\"\"\"\n  mcc: String\n  \"\"\"The customer-facing business name. This can be unset by updating the value to null and then saving.\"\"\"\n  name: String\n  \"\"\"Internal-only description of the product sold by, or service provided by, the business. Used by Stripe for risk and underwriting purposes. This can be unset by updating the value to null and then saving.\"\"\"\n  product_description: String\n  \"\"\"A publicly available mailing address for sending support issues to.\"\"\"\n  support_address: Address\n  \"\"\"A publicly available email address for sending support issues to.\"\"\"\n  support_email: String\n  \"\"\"A publicly available phone number to call with support issues.\"\"\"\n  support_phone: String\n  \"\"\"A publicly available website for handling support issues.\"\"\"\n  support_url: String\n  \"\"\"The business’s publicly available website. This can be unset by updating the value to null and then saving.\"\"\"\n  url: String\n}\n\n\"\"\"A hash containing the set of capabilities that was requested for this account and their associated states. Keys may be card_payments, legacy_payments, or platform_payments. Values may be active, inactive, or pending.\"\"\"\ntype AccountCapabilities {\n  \"\"\"\n  The status of the card payments capability of the account, or whether the\n  account can directly process credit and debit card charges.\n  \"\"\"\n  card_payments: CapabilitiesPayments\n  \"\"\"The status of the legacy payments capability of the account.\"\"\"\n  legacyPayments: CapabilitiesPayments\n  \"\"\"\n  The status of the platform payments capability of the account, or whether your\n  platform can process charges on behalf of the account.\n  \"\"\"\n  platformPayments: CapabilitiesPayments\n}\n\ntype AccountSettings {\n  \"\"\"Settings used to apply the account’s branding to email receipts, invoices, Checkout, and other products.\"\"\"\n  branding: AccountSettingsBranding\n  \"\"\"Settings specific to card charging on the account.\"\"\"\n  card_payments: AccountSettingsCardPayments\n  \"\"\"Settings that apply across payment methods for charging on the account.\"\"\"\n  payments: AccountSettingsPayments\n  \"\"\"Settings specific to the account’s payouts.\"\"\"\n  payouts: AccountSettingsPayouts\n}\n\nenum AccountType {\n  standard\n  express\n  custom\n}\n\nenum Purpose {\n  business_logo\n  customer_signature\n  dispute_evidence\n  identity_document\n  pci_document\n  tax_document_user_upload\n}\n\nenum FileType {\n  csv\n  pdf\n  jpg\n  png\n}\n\ntype AccountRequirements {\n  \"\"\"\n  The date the fields in `currently_due` must be collected by to keep payouts\n  enabled for the account. These fields might block payouts sooner if the next\n  threshold is reached before these fields are collected.\n  \"\"\"\n  current_deadline: DateTime\n  \"\"\"\n  The fields that need to be collected to keep the account enabled. If not\n  collected by the `current_deadline`, these fields will appear in `past_due` as\n  well, and the account will be disabled.\n  \"\"\"\n  currently_due: [String]\n  \"\"\"\n  If the account is disabled, this string describes why the account can’t create\n  charges or receive payouts. Can be `requirements.past_due`,\n  `requirements.pending_verification`, `rejected.fraud`,\n  `rejected.terms_of_service`, `rejected.listed`, `rejected.other`, `listed`,\n  `under_review`, or `other`.\n  \"\"\"\n  disabled_reason: String\n  \"\"\"\n  The fields that need to be collected assuming all volume thresholds are\n  reached. As they become required, these fields will appear in `currently_due`\n  as well, and the `current_deadline` will be set.\n  \"\"\"\n  eventually_due: [String]\n  \"\"\"The fields that weren't collected by the `current_deadline`. These fields need to be collected to re-enable the account.\"\"\"\n  past_due: [String]\n}\n\ntype LegalEntityCompany {\n  address: Address\n  \"\"\"The Kana variation of the company's primary address (Japan only).\"\"\"\n  address_kana: JapaneseAddress\n  \"\"\"The Kanji variation of the company's primary address (Japan only).\"\"\"\n  address_kanji: JapaneseAddress\n  \"\"\"Whether information was collected from the company's directors.\"\"\"\n  directors_provided: Boolean\n  \"\"\"The company's legal name.\"\"\"\n  name: String\n  \"\"\"The Kana variation of the company's legal name Japan only).\"\"\"\n  name_kana: String\n  \"\"\"The Kanji variation of the company's legal name (Japan only).\"\"\"\n  name_kanji: String\n  \"\"\"Whether the company's owners have been provided.\"\"\"\n  owners_provided: Boolean\n  \"\"\"The company's phone number (used for verification).\"\"\"\n  phone: String\n  \"\"\"Whether the company's business ID number was provided.\"\"\"\n  tax_id_provided: Boolean\n  \"\"\"The jurisdiction in which the `tax_id` is registered (Germany-based companies only).\"\"\"\n  tax_id_registrar: String\n  \"\"\"Whether the company's business VAT number was provided.\"\"\"\n  vat_id_provided: Boolean\n}\n\ntype AccountTosAcceptance {\n  \"\"\"The Unix timestamp marking when the Stripe Services Agreement was accepted by the account representative\"\"\"\n  date: Int\n  \"\"\"The IP address from which the Stripe Services Agreement was accepted by the account representative\"\"\"\n  ip: String\n  \"\"\"The user agent of the browser from which the Stripe Services Agreement was accepted by the account representative\"\"\"\n  userAgent: String\n}\n\ntype JapaneseAddress {\n  city: String\n  \"\"\"2-letter country code.\"\"\"\n  country: CountryCode\n  \"\"\"Block/Building number.\"\"\"\n  line1: String\n  \"\"\"Building details.\"\"\"\n  line2: String\n  \"\"\"ZIP or postal code.\"\"\"\n  postal_code: String\n  \"\"\"Prefecture.\"\"\"\n  state: String\n  \"\"\"Town/cho-me.\"\"\"\n  town: String\n}\n\ntype DateOfBirth {\n  \"\"\"The day of birth, between 1 and 31.\"\"\"\n  day: Int\n  \"\"\"The month of birth, between 1 and 12.\"\"\"\n  month: Int\n  \"\"\"The four-digit year of birth.\"\"\"\n  year: Int\n}\n\ntype PersonRelationship {\n  \"\"\"\n  Whether the person opened the account. This person provides information about\n  themselves, and general information about the account.\n  \"\"\"\n  account_opener: Boolean\n  \"\"\"Whether the person is a director of the account's legal entity.\"\"\"\n  director: Boolean\n  \"\"\"Whether the person is an owner of the account’s legal entity.\"\"\"\n  owner: Boolean\n  \"\"\"The percent owned by the person of the account's legal entity.\"\"\"\n  percent_ownership: Float\n  \"\"\"The person's title (e.g., CEO, Support Engineer).\"\"\"\n  title: String\n}\n\ntype PersonRequirements {\n  \"\"\"Fields that need to be collected to keep the person’s account enabled. If not collected by the account’s current_deadline, these fields are moved to past_due and the account is disabled.\"\"\"\n  currently_due: [String]\n  \"\"\"Fields that need to be collected assuming all volume thresholds are reached. As fields are needed, they are moved to currently_due and the account’s current_deadline is set.\"\"\"\n  eventually_due: [String]\n  \"\"\"Fields that weren’t collected by the account’s current_deadline. These fields need to be collected to enable payouts for the person’s account.\"\"\"\n  past_due: [String]\n}\n\ntype LegalEntityVerification {\n  details: String\n  \"\"\"A machine-readable code specifying the verification state for this legal entity.\"\"\"\n  details_code: LegalEntityVerificationDetailsCode\n  \"\"\"An identifying document for the person, either a passport or local ID card.\"\"\"\n  document: VerificationDocument\n  \"\"\"The state of verification for this legal entity.\"\"\"\n  status: LegalEntityVerificationStatus\n}\n\n\"\"\"Define thresholds at which an invoice will be sent, and the related subscription advanced to a new billing period\"\"\"\ntype BillingSubscriptionItemBillingThresholds {\n  \"\"\"Usage threshold that triggers the subscription to create an invoice\"\"\"\n  usage_gte: Float\n}\n\nenum Duration {\n  forever\n  once\n  repeating\n}\n\nenum AggregateUsage {\n  lastDuringPeriod\n  lastEver\n  max\n  sum\n}\n\nenum BillingScheme {\n  perUnit\n  tiered\n}\n\nenum PlanInterval {\n  day\n  month\n  week\n  year\n}\n\ntype PlanTier {\n  \"\"\"Price for the entire tier.\"\"\"\n  flatAmount: Int\n  \"\"\"Per unit price for units relevant to the tier.\"\"\"\n  unitAmount: Int\n  \"\"\"Up to and including to this quantity will be contained in the tier.\"\"\"\n  upTo: Int\n}\n\nenum TiersMode {\n  graduated\n  volume\n}\n\nenum UsageType {\n  licensed\n  metered\n}\n\ntype PackageDimensions {\n  \"\"\"Height, in inches.\"\"\"\n  height: Float\n  \"\"\"Length, in inches.\"\"\"\n  length: Float\n  \"\"\"Weight, in ounces.\"\"\"\n  weight: Float\n  \"\"\"Width, in inches.\"\"\"\n  width: Float\n}\n\nenum ProductType {\n  good\n  service\n}\n\nenum InvoiceBilling {\n  chargeAutomatically\n  sendInvoice\n}\n\nenum InvoiceBillingReason {\n  automaticPendingInvoiceItemInvoice\n  manual\n  subscription\n  subscriptionCreate\n  subscriptionCycle\n  subscriptionThreshold\n  subscriptionUpdate\n  upcoming\n}\n\ntype InvoiceSettingCustomField {\n  \"\"\"The name of the custom field.\"\"\"\n  name: String\n  \"\"\"The value of the custom field.\"\"\"\n  value: String\n}\n\nenum InvoiceStatus {\n  deleted\n  draft\n  open\n  paid\n  uncollectible\n  void\n}\n\ntype InvoicesStatusTransitions {\n  \"\"\"The time that the invoice draft was finalized.\"\"\"\n  finalized_at: DateTime\n  \"\"\"The time that the invoice was marked uncollectible.\"\"\"\n  marked_uncollectible_at: DateTime\n  \"\"\"The time that the invoice was paid.\"\"\"\n  paid_at: DateTime\n  \"\"\"The time that the invoice was voided.\"\"\"\n  voided_at: DateTime\n}\n\ntype InvoiceThresholdReason {\n  \"\"\"The total invoice amount threshold boundary if it triggered the threshold invoice.\"\"\"\n  amount_gte: Int\n  \"\"\"Indicates which line items triggered a threshold invoice.\"\"\"\n  item_reasons: [InvoiceItemThresholdReason]\n}\n\ntype InvoiceLineItemPeriod {\n  \"\"\"End of the line item's billing period\"\"\"\n  end: Int\n  \"\"\"Start of the line item's billing period\"\"\"\n  start: Int\n}\n\nenum InvoiceType {\n  invoiceitem\n  subscription\n}\n\ntype FraudDetails {\n  stripe_report: String\n  user_report: String\n}\n\ntype ChargeOutcome {\n  network_status: NetworkStatus\n  reason: String\n  risk_level: String\n  risk_score: Int\n  rule: String\n  seller_message: String\n  type: ChargeOutcomeType\n}\n\ntype RefundList {\n  data: [Refund]\n  has_more: Boolean\n  url: String\n}\n\ntype ChargeShipping {\n  address: Address\n  carrier: String\n  name: String\n  phone: String\n  tracking_number: String\n}\n\nenum ChargeStatus {\n  succeeded\n  pending\n  faile\n}\n\n\"\"\"The data with which to automatically create a Transfer when the payment is finalized. See the PaymentIntents Connect usage guide for details.\"\"\"\ntype TransferData {\n  \"\"\"The account (if any) the payment will be attributed to for tax reporting, and where funds from the payment will be transferred to upon payment success.\"\"\"\n  destination: Account @expandable\n}\n\nenum FailureReason {\n  lost_or_stolen_card\n  expired_or_canceled_card\n  unknown\n}\n\nenum RefundReason {\n  duplicate\n  fraudulent\n  requested_by_customer\n}\n\nenum RefundStatus {\n  pending\n  succeeded\n  failed\n  canceled\n}\n\n\"\"\"https://stripe.com/docs/api/balance\"\"\"\ntype Fund {\n  \"\"\"Balance amount.\"\"\"\n  amount: Float\n  \"\"\"\n  Three-letter [ISO currency\n  code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be\n  a [supported currency](https://stripe.com/docs/currencies).\n  \"\"\"\n  currency: Currency\n  \"\"\"Breakdown of balance by source types.\"\"\"\n  source_types: SourceTypes\n}\n\ntype FeeDetail {\n  id: ID\n  amount: Int\n  application: String\n  currency: Currency\n  description: String\n  type: FeeDetailType\n}\n\nenum BalanceTransactionStatus {\n  AVAILABLE\n  PENDING\n}\n\nenum BalanceTransactionType {\n  CHARGE\n  REFUND\n  ADJUSTMENT\n  APPLICATION_FEE\n  APPLICATION_FEE_REFUND\n  TRANSFER\n  PAYMENT\n  PAYOUT\n  PAYOUT_FAILURE\n  STRIPE_FEE\n  NETWORK_COST\n}\n\n\"\"\"The period associated with this invoice item.\"\"\"\ntype Period {\n  \"\"\"The end of the period, which must be greater than or equal to the start.\"\"\"\n  end: DateTime\n  \"\"\"The start of the period.\"\"\"\n  start: DateTime\n}\n\n\"\"\"The status of the code verification, either pending (awaiting verification, attempts_remaining should be greater than 0), succeeded (successful verification) or failed (failed verification, cannot be verified anymore as attempts_remaining should be 0).\"\"\"\nenum CodeVerificationStatus {\n  PENDING\n  SUCCEEDED\n  FAILED\n}\n\n\"\"\"Type of refund attribute method.\"\"\"\nenum RefundAttributesMethod {\n  email\n  manual\n  none\n}\n\n\"\"\"Type of refund attribute status.\"\"\"\nenum RefundAttributesStatus {\n  MISSING\n  REQUESTED\n  AVAILABLE\n}\n\n\"\"\"The status of the redirect.\"\"\"\nenum RedirectStatus {\n  PENDING\n  SUCCEEDED\n  NOT_REQUIRED\n  FAILED\n}\n\ntype AccountSettingsBranding {\n  icon: File @expandable\n  logo: File @expandable\n  primary_color: String\n}\n\ntype AccountSettingsCardPayments {\n  \"\"\"Automatically declines certain charge types regardless of whether the card issuer accepted or declined the charge.\"\"\"\n  decline_on: AccountSettingsCardPaymentsDeclineOn\n  \"\"\"The default text that appears on credit card statements when a charge is made. This field prefixes any dynamic statement_descriptor specified on the charge. statement_descriptor_prefix is useful for maximizing descriptor space for the dynamic portion.\"\"\"\n  statement_descriptor_prefix: String\n}\n\ntype AccountSettingsPayments {\n  \"\"\"The default text that appears on credit card statements when a charge is made. This field prefixes any dynamic statement_descriptor specified on the charge.\"\"\"\n  statement_descriptor: String\n}\n\ntype AccountSettingsPayouts {\n  \"\"\"A Boolean indicating if Stripe should try to reclaim negative balances from an attached bank account. See our Understanding Connect Account Balances documentation for details. Default value is true for Express accounts and false for Custom accounts.\"\"\"\n  debit_negative_balances: Boolean\n  \"\"\"Details on when funds from charges are available, and when they are paid out to an external account. See our Setting Bank and Debit Card Payouts documentation for details.\"\"\"\n  schedule: AccountSettingsPayoutsSchedule\n  \"\"\"The text that appears on the bank account statement for payouts. If not set, this defaults to the platform’s bank descriptor as set in the Dashboard.\"\"\"\n  statement_descriptor: String\n}\n\nenum LegalEntityVerificationDetailsCode {\n  scan_name_mismatch\n  failed_keyed_identity\n  failed_other\n}\n\ntype VerificationDocument {\n  \"\"\"The back of an ID returned by a file upload with a purpose value of identity_document.\"\"\"\n  back: File @expandable\n  \"\"\"A user-displayable string describing the verification state of this document. For example, if a document is uploaded and the picture is too fuzzy, this may say “Identity document is too unclear to read”.\"\"\"\n  details: String\n  \"\"\"One of document_corrupt, document_failed_copy, document_not_readable, document_failed_greyscale, document_not_uploaded, document_id_type_not_supported, document_id_country_not_supported, document_failed_other, document_fraudulent, document_invalid, document_manipulated, document_missing_back, document_missing_front, document_photo_mismatch, document_too_large, or document_failed_test_mode. A machine-readable code specifying the verification state for this document.\"\"\"\n  details_code: DocumentDetailsCode\n  \"\"\"The front of an ID returned by a file upload with a purpose value of identity_document.\"\"\"\n  front: File @expandable\n}\n\nenum LegalEntityVerificationStatus {\n  unverified\n  pending\n  verified\n}\n\ntype InvoiceItemThresholdReason {\n  \"\"\"The IDs of the line items that triggered the threshold invoice.\"\"\"\n  line_item_ids: [ID]\n  \"\"\"The quantity threshold boundary that applied to the given line item.\"\"\"\n  usage_gte: Int\n}\n\nenum NetworkStatus {\n  approved_by_network\n  declined_by_network\n  not_sent_to_network\n  reversed_after_approval\n}\n\nenum ChargeOutcomeType {\n  authhorized\n  manual_review\n  issuer_declined\n  blocked\n  invalid\n}\n\ntype SourceTypes {\n  \"\"\"Amount for bank account.\"\"\"\n  bank_account: Float\n  \"\"\"Amount for card.\"\"\"\n  card: Float\n}\n\nenum FeeDetailType {\n  APPLICATION_FEE\n  STRIPE_FEE\n  TAX\n}\n\ntype AccountSettingsCardPaymentsDeclineOn {\n  \"\"\"Whether Stripe automatically declines charges with an incorrect ZIP or postal code. This setting only applies when a ZIP or postal code is provided and they fail bank verification.\"\"\"\n  avs_failure: Boolean\n  \"\"\"Whether Stripe automatically declines charges with an incorrect CVC. This setting only applies when a CVC is provided and it fails bank verification.\"\"\"\n  cvc_failure: Boolean\n}\n\ntype AccountSettingsPayoutsSchedule {\n  \"\"\"The number of days charges for the account will be held before being paid out.\"\"\"\n  delay_days: Int\n  \"\"\"How frequently funds will be paid out. One of manual (payouts only created via API call), daily, weekly, or monthly.\"\"\"\n  interval: Interval\n  \"\"\"The day of the month funds will be paid out. Only shown if interval is monthly. Payouts scheduled between the 29th and 31st of the month are sent on the last day of shorter months.\"\"\"\n  monthly_anchor: Int\n  \"\"\"The day of the week funds will be paid out, of the style ‘monday’, ‘tuesday’, etc. Only shown if interval is weekly.\"\"\"\n  weekly_anchor: String\n}\n\nenum DocumentDetailsCode {\n  document_corrupt\n  document_failed_copy\n  document_not_readable\n  document_failed_greyscale\n  document_not_uploaded\n  document_id_type_not_supported\n  document_id_country_not_supported\n  document_failed_other\n  document_fraudulent\n  document_invalid\n  document_manipulated\n  document_missing_back\n  document_missing_front\n  document_photo_mismatch\n  document_too_large\n  document_failed_test_mode\n}\n\nenum Interval {\n  manual\n  daily\n  weekly\n  monthly\n}\n"

const Core = new GraphQLModule<CoreConfig>({
  typeDefs,
  resolvers,
  providers: () => [Provider],
  context: async (_, __, { injector }) => ({
    stripe: injector.get(Provider).stripe
  })
});

@Injectable()
class Provider {
  stripe: Stripe;

  constructor(@Inject(ModuleConfig(Core)) config: CoreConfig) {
    this.stripe =
      config.stripe instanceof Stripe
        ? config.stripe
        : new Stripe(config.stripe);
  }
}

export default Core;



// // import { buildModule } from '../../Module'

// // export default buildModule(__dirname)

// import { GraphQLModule } from '@graphql-modules/core'
// import { StripeConfig } from '../../../types'
// import { resolvers } from './resolvers'
// // import { importSchema } from 'graphql-import'
// import typeDefs from './typeDefs.ts'
// // import { schemaDirectives } from './directives'
// import * as Stripe from 'stripe'

// // console.log(process.env)
// const Module = new GraphQLModule<StripeConfig>({
//   typeDefs, //: importSchema(__dirname + '/typeDefs.graphql'),
//   resolvers: {
//     Node: { __resolveType: () => ({ object: 'list' }) },
//     Object: {
//       __resolveType: () => ({ object: 'list' })
//     },
//     ...resolvers
//   },
//   // schemaDirectives,
//   providers: () => [StripeProvider],
//   context: async (s, x, { injector }) => ({
//     stripe: injector.get(StripeProvider).stripe
//   })
// })

// import { getStripeProvider } from '../../provider'
// // const getStripeProvider = require('./provider').getStripeProvider
// const StripeProvider = getStripeProvider(Module)

// export default Module
// // import { getStripeProvider } from './provider'

// export const Customers = new GraphQLModule({
//   typeDefs,
//   resolvers: ({ config: { stripe } }) => resolversFn(stripe)
// }).forRoot({ stripe: new Stripe('sk_test_4eC39HqLyjWDarjtT1zdp7dc') })
