# import DateTime, JSON, URL from '../../Scalars.graphql'
# import Currency from '../../Currency.graphql'
# import Discount from '../../billing/Discounts/typeDefs.graphql'
# import BillingSubscriptionList from '../../billing/Subscriptions/typeDefs.graphql'
# import Address, AddressInput from '../../Address.graphql'
# import Source from '../../payment/Sources/typeDefs.graphql'
# import Object, ObjectType from '../../Object.graphql'
# import CreatedInput from '../../Created.graphql'
# import constraint, expandable from '../../Directives.graphql'
# import Node from '../../Node.graphql'

type Customer implements Object {
  id: ID
  """
  String representing the object’s type. Objects of the same type share the same value.
  """
  object: ObjectType
  """
  Current balance, if any, being stored on the customer’s account. If negative, the customer has credit to apply to the next invoice. If positive, the customer has an amount owed that will be added to the next invoice. The balance does not refer to any unpaid invoices; it solely takes into account amounts that have yet to be successfully applied to any invoice. This balance is only taken into account as invoices are finalized. Note that the balance does not include unpaid invoices.
  """
  account_balance: Int
  """
  Time at which the object was created. Measured in seconds since the Unix epoch.
  """
  created: DateTime
  currency: Currency
  """
  ID of the default source attached to this customer.
  """
  default_source: Source @expandable
  """
  When the customer’s latest invoice is billed by charging automatically, delinquent is true if the invoice’s latest charge is failed. When the customer’s latest invoice is billed by sending an invoice, delinquent is true if the invoice is not paid by its due date.
  """
  delinquent: Boolean
  """
  An arbitrary string attached to the object. Often useful for displaying to users.
  """
  description: String
  discount: Discount
  """
  The customer’s email address.
  """
  email: String
  """
  The prefix for the customer used to generate unique invoice numbers.
  """
  invoice_prefix: String
  """
  The customer’s default invoice settings.
  """
  invoice_settings: CustomerInvoiceSetting
  """
  Has the value true if the object exists in live mode or the value false if the object exists in test mode.
  """
  livemode: Boolean
  """
  Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
  """
  metadata: JSON
  shipping: CustomerShipping
  sources: CustomerPaymentSource
  """
  The customer’s current subscriptions, if any.
  """
  subscriptions: BillingSubscriptionList
  """
  The customer’s tax information. Appears on invoices emailed to this customer.
  """
  tax_info: CustomerTaxInformation
  """
  Describes the status of looking up the tax ID provided in tax_info.
  """
  tax_info_verification: CustomerTaxInformationVerification
}

"""
The customer’s tax information. Appears on invoices emailed to this customer.
"""
type CustomerTaxInformation {
  """
  The customer’s tax ID number.
  """
  tax_id: ID
  """
  The type of ID number.
  """
  type: TaxType
}

input CustomerTaxInformationInput {
  """
  The customer’s tax ID number. This can be unset by updating the value to null and then saving.
  """
  tax_id: ID!
  """
  The type of ID number. The only possible value is vat
  """
  type: TaxType!
}

enum TaxType {
  vat
}

"""
Describes the status of looking up the tax ID provided in tax_info.
"""
type CustomerTaxInformationVerification {
  """
  The state of verification for this customer
  """
  status: VerificationStatus
  """
  The official name associated with the tax ID returned from the external provider.
  """
  verified_name: String
}

enum VerificationStatus {
  unverfied
  pending
  verrified
}

"""
The customer’s default invoice settings.
"""
type CustomerInvoiceSetting {
  """
  Default custom fields to be displayed on invoices for this customer.
  """
  custom_fields: CustomerInvoiceSettingCustomField
  """
  Default footer to be displayed on invoices for this customer.
  """
  footer: String
}

"""
Default custom fields to be displayed on invoices for this customer.
"""
type CustomerInvoiceSettingCustomField {
  """
  The name of the custom field.
  """
  name: String!
  """
  The value of the custom field.
  """
  value: String!
}

"""
Mailing and shipping address for the customer. Appears on invoices emailed to this customer.
"""
type CustomerShipping {
  """
  Customer name.
  """
  name: String
  """
  Customer phone (including extension).
  """
  phone: String
  """
  Customer shipping address.
  """
  address: Address
}

# Edge ???
"""
The customer’s payment sources, if any.
"""
type CustomerPaymentSource {
  data: [Source]
  """
  True if this list has another page of items after this one that can be fetched.
  """
  has_more: Boolean
  """
  The URL where this list can be accessed.
  """
  url: String
}

input CustomerWhereUniqueInput {
  id: ID!
}

input CustomerUpdateInput {
  """
  An integer amount in cents that represents the account balance for your customer. Account balances only affect invoices. A negative amount represents a credit that decreases the amount due on an invoice; a positive amount increases the amount due on an invoice.
  """
  account_balance: Int
  """
  If you provide a coupon code, the customer will have a discount applied on all recurring charges. Charges you create through the API will not have the discount. This can be unset by updating the value to null and then saving.
  """
  coupon: ID
  """
  ID of the default payment source for the customer.
  """
  default_source: String
  """
  An arbitrary string that you can attach to a customer object. It is displayed alongside the customer in the dashboard. This can be unset by updating the value to null and then saving.
  """
  description: String
  """
  Customer’s email address. It’s displayed alongside the customer in your dashboard and can be useful for searching and tracking. This may be up to 512 characters. This can be unset by updating the value to null and then saving.
  """
  email: String @constraint(format: "email")
  """
  The prefix for the customer used to generate unique invoice numbers. Must be 3–12 uppercase letters or numbers.
  """
  invoice_prefix: String
  """
  Default invoice settings for this customer.
  """
  invoice_settings: CustomerInvoiceSettingInput
  """
  A set of key-value pairs that you can attach to a customer object. It can be useful for storing additional information about the customer in a structured format.
  """
  metadata: JSON
  """
  The customer’s shipping information. Appears on invoices emailed to this customer.
  """
  shipping: CustomerShippingInput
  # to doCustomerPaymentSourceInput
  """
  A Token’s or a Source’s ID, as returned by Elements. Passing source will create a new source object, make it the new customer default source, and delete the old customer default if one exists. If you want to add additional sources instead of replacing the existing default, use the card creation API. Whenever you attach a card to a customer, Stripe will automatically validate the card.
  """
  source: String
  """
  The customer’s tax information. Appears on invoices emailed to this customer.
  """
  tax_info: CustomerTaxInformationInput
}

input CustomerCreateInput {
  """
  An integer amount in cents that represents the account balance for your customer. Account balances only affect invoices. A negative amount represents a credit that decreases the amount due on an invoice; a positive amount increases the amount due on an invoice.
  """
  account_balance: Int
  """
  The code of the coupon to apply to this subscription. A coupon applied to a subscription will only affect invoices created for that particular subscription. This can be unset by updating the value to null and then saving.
  """
  coupon: ID
  default_source: String
  """
  An arbitrary string that you can attach to a customer object. It is displayed alongside the customer in the dashboard. This can be unset by updating the value to null and then saving.
  """
  description: String
  email: String @constraint(format: "email")
  """
  The prefix for the customer used to generate unique invoice numbers. Must be 3–12 uppercase letters or numbers.
  """
  invoice_prefix: String
  """
  Default invoice settings for this customer.
  """
  invoice_settings: CustomerInvoiceSettingInput
  """
  Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
  """
  metadata: JSON
  shipping: CustomerShippingInput
  # to doCustomerPaymentSourceInput
  """
  The source can either be a Token or a Source, as returned by Elements, or a object containing a user’s credit card details (with the options shown below). You must provide a source if the customer does not already have a valid source attached, and you are subscribing the customer to be charged automatically for a plan that is not free. Passing source will create a new source object, make it the customer default source, and delete the old customer default if one exists. If you want to add an additional source, instead use the card creation API to add the card and then the customer update API to set it as the default. Whenever you attach a card to a customer, Stripe will automatically validate the card.
  """
  source: String
  """
  The customer’s tax information. Appears on invoices emailed to this customer.
  """
  tax_info: CustomerTaxInformationInput
}

input CustomerPaymentSourceInput {
  token: String
  soure: String
}

input CustomerShippingInput {
  """
  Customer shipping address.
  """
  address: AddressInput!
  """
  Customer name. This can be unset by updating the value to null and then saving.
  """
  name: String!
  """
  Customer phone (including extension). This can be unset by updating the value to null and then saving.
  """
  phone: String
}

"""
Default invoice settings for this customer.
"""
input CustomerInvoiceSettingInput {
  """
  Default custom fields to be displayed on invoices for this customer.
  """
  custom_fields: CustomerInvoiceSettingCustomFieldInput
  """
  Default footer to be displayed on invoices for this customer.
  """
  footer: String
}

"""
Default custom fields to be displayed on invoices for this customer.
"""
input CustomerInvoiceSettingCustomFieldInput {
  """
  The name of the custom field. This may be up to 30 characters.
  """
  name: String
  """
  The value of the custom field. This may be up to 30 characters.
  """
  value: String
}

input CustomerWhereInput {
  created: CreatedInput
  """
  A filter on the list based on the customer’s email field. The value must be a string.
  """
  email: String @constraint(format: "email")
  """
  A cursor for use in pagination. ending_before is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with obj_bar, your subsequent call can include ending_before=obj_bar in order to fetch the previous page of the list.
  """
  ending_before: ID
  """
  A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
  """
  limit: Int
  """
  A cursor for use in pagination. starting_after is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include starting_after=obj_foo in order to fetch the next page of the list.
  """
  starting_after: ID
}

type CustomerList implements Object {
  object: ObjectType
  url: String
  has_more: Boolean
  data: [Customer]
}

type DeleteCustomerPayload implements Object {
  id: ID
  object: ObjectType
  deleted: Boolean
}

type Query {
  node(id: ID!): Node
  retrieveCustomer(where: CustomerWhereUniqueInput!): Customer
  """
  Returns a list of your customers. The customers are returned sorted by creation date, with the most recent customers appearing first.
  """
  listCustomers(where: CustomerWhereInput): CustomerList
}

type Mutation {
  createCustomer(data: CustomerCreateInput!): Customer!
  updateCustomer(
    where: CustomerWhereUniqueInput!
    data: CustomerUpdateInput!
  ): Customer
  deleteCustomer(where: CustomerWhereUniqueInput!): DeleteCustomerPayload
}
