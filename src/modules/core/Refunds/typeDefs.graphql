# import JSON from '../../Scalars.graphql'
# import Currency from '../../Currency.graphql'
# import Node from '../../Node.graphql'
# import Object, ObjectType from '../../Object.graphql'
# import BalanceTransaction from '../Balance/typeDefs.graphql'
# import Charge, ChargeWhereUniqueInput from '../Charges/typeDefs.graphql'
# import CreatedInput from '../../Created.graphql'
# import constraint, expandable, connectOnly from '../../Directives.graphql'
# import Node from '../../Node.graphql'
# import Object, ObjectType from '../../Object.graphql'
# import TransferReversal from '../../connect/TransferReversals/typeDefs.graphql'
# import DateTime from '../../Scalars.graphql'

type Refund implements Node & Object {
  """
  Unique identifier for the object.
  """
  id: ID!
  """
  String representing the object’s type. Objects of the same type share the same value.
  """
  object: ObjectType
  """
  Amount, in cents.
  """
  amount: Float
  """
  Balance transaction that describes the impact on your account balance.
  """
  balance_transaction: BalanceTransaction @expandable
  """
  ID of the charge that was refunded.
  """
  charge: Charge @expandable
  """
  Time at which the object was created. Measured in seconds since the Unix epoch.
  """
  created: DateTime
  """
  Three-letter ISO currency code, in lowercase. Must be a supported currency.
  """
  currency: Currency
  """
  An arbitrary string attached to the object. Often useful for displaying to users. (Available on non-card refunds only)
  """
  description: String
  """
  If the refund failed, this balance transaction describes the adjustment made on your account balance that reverses the initial balance transaction.
  """
  failure_balance_transaction: BalanceTransaction @expandable
  """
  If the refund failed, the reason for refund failure if known. Possible values
  are `lost_or_stolen_card`, `expired_or_canceled_card`, or `unknown`.
  """
  failure_reason: RefundFailureReason
  """
  Set of key-value pairs that you can attach to an object. This can be useful
  for storing additional information about the object in a structured format.
  """
  metadata: JSON
  """
  Reason for the refund. If set, possible values are duplicate, fraudulent, and requested_by_customer
  """
  reason: RefundReason
  """
  This is the transaction number that appears on email receipts sent for this refund.
  """
  receipt_number: String
  """
  The transfer reversal that is associated with the refund. Only present if the charge came from another Stripe account. See the Connect documentation for details.
  """
  source_transfer_reversal: TransferReversal @expandable
  """
  Status of the refund. For credit card refunds, this can be succeeded or failed. For other types of refunds, it can be pending, succeeded, failed, or canceled. Refer to our refunds documentation for more details.
  """
  status: RefundStatus
  """
  If the accompanying transfer was reversed, the transfer reversal object. Only applicable if the charge was created using the destination parameter.
  """
  transfer_reversal: TransferReversal @expandable
}

type RefundList {
  data: [Refund]
  has_more: Boolean
  url: String
}

enum RefundStatus {
  pending
  succeeded
  failed
  canceled
}

enum RefundReason {
  duplicate
  fraudulent
  requested_by_customer
}

enum RefundFailureReason {
  lost_or_stolen_card
  expired_or_canceled_card
  unknown
}

input RefundCreateInput {
  """
  A positive integer in cents representing how much of this charge to refund. Can refund only up to the remaining, unrefunded amount of the charge.
  """
  amount: Float
  """
  A set of key-value pairs that you can attach to a Refund object. This can be useful for storing additional information about the refund in a structured format. You can unset individual keys if you POST an empty value for that key. You can clear all keys if you POST an empty value for metadata
  """
  metadata: JSON
  """
  String indicating the reason for the refund. If set, possible values are duplicate, fraudulent, and requested_by_customer. If you believe the charge to be fraudulent, specifying fraudulent as the reason will add the associated card and email to your blocklists, and will also help us improve our fraud detection algorithms.
  """
  reason: RefundReason
  """
    Boolean indicating whether the application fee should be refunded when refunding this charge. If a full charge refund is given, the full application fee will be refunded. Otherwise, the application fee will be refunded in an amount proportional to the amount of the charge refunded.

  An application fee can be refunded only by the application that created the charge.
  """
  refund_application_fee: Boolean @connectOnly
  """
  Boolean indicating whether the transfer should be reversed when refunding this charge. The transfer will be reversed proportionally to the amount being refunded (either the entire or partial amount).

  A transfer can be reversed only by the application that created the charge.
  """
  reverse_transfer: Boolean @connectOnly
}

input RefundUpdateInput {
  """
  Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to metadata.
  """
  metadata: JSON
}

input RefundWhereUniqueInput {
  """
  ID of refund to retrieve.
  """
  id: ID!
}

input RefundWhereInput {
  "Only return refunds for the charge specified by this charge ID."
  charge: ID
  """
  A filter on the list based on the object created field. The value can be a string with an integer Unix timestamp, or it can be a dictionary.
  """
  created: CreatedInput
  """
  A cursor for use in pagination. ending_before is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with obj_bar, your subsequent call can include ending_before=obj_bar in order to fetch the previous page of the list.
  """
  ending_before: ID
  """
  A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
  """
  limit: Int @constraint(max: 100)

  """
  A cursor for use in pagination. starting_after is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include starting_after=obj_foo in order to fetch the next page of the list.
  """
  starting_after: ID
}

type Query {
  node(id: ID!): Node
  """
  Retrieves the details of an existing refund.
  """
  retrieveRefund(where: RefundWhereUniqueInput!): Refund
  """
  Returns a list of all refunds you’ve previously created. The refunds are returned in sorted order, with the most recent refunds appearing first. For convenience, the 10 most recent refunds are always available by default on the charge object.
  """
  listRefunds(where: RefundWhereInput): RefundList
}

type Mutation {
  createRefund(
    whereCharge: ChargeWhereUniqueInput!
    data: RefundCreateInput!
  ): Refund
  updateRefund(where: RefundWhereUniqueInput!, data: RefundUpdateInput!): Refund
}
