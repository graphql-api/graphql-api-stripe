# import DateTime, JSON from '../../Scalars.graphql'
# import Currency from '../../Currency.graphql'
# import Object, ObjectType from '../../Object.graphql'
# import Product from '../Products/typeDefs.graphql'

type Price {
  id: ID!
  active: Boolean
  livemode: Boolean
  lookup_key: String
  object: ObjectType
  currency: Currency
  billing_scheme: BillingScheme
  created: DateTime
  metadata: JSON
  product: Product
  recurring: PriceRecurring
  tiers_mode: PriceTiersMode
  transform_quantity: PriceTransformQuantity
  type: PriceType
  """
  The unit amount in cents to be charged, represented as a whole integer if possible. Only set if billing_scheme=per_unit.
  """
  unit_amount: Int
  unit_amount_decimal: String
}

enum PriceTiersMode {
  graduated
  volume
}

"""
One of one_time or recurring depending on whether the price is for a one-time purchase or a recurring (subscription) purchase.
"""
enum PriceType {
  one_time
  recurring
}

type PriceTransformQuantity {
  """
  Divide usage by this number.
  """
  divide_by: Int
  """
  After division, either round the result up or down.
  """
  round: PriceTransformQuantityRound
}

enum PriceTransformQuantityRound {
  up
  down
}

type PriceRecurring {
  """
  Specifies a usage aggregation strategy for prices of usage_type=metered. Allowed values are sum for summing up all usage during a period, last_during_period for using the last usage record reported within a period, last_ever for using the last usage record ever (across period bounds) or max which uses the usage record with the maximum reported usage during a period. Defaults to sum.
  """
  aggregate_usage: String
  """
  The frequency at which a subscription is billed. One of day, week, month or year.
  """
  interval: Interval
  """
  The number of intervals (specified in the interval attribute) between subscription billings. For example, interval=month and interval_count=3 bills every 3 months.
  """
  interval_count: Int
  """
  Configures how the quantity per period should be determined. Can be either metered or licensed. licensed automatically bills the quantity set when adding it to a subscription. metered aggregates the total usage based on usage records. Defaults to licensed.
  """
  usage_type: UsageType
}

enum UsageType {
  metered
  licensed
}

enum Interval {
  day
  week
  month
  year
}

enum BillingScheme {
  per_unit
}
