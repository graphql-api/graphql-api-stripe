# import DateTime, JSON from '../../Scalars.graphql'
# import Customer from '../../core/Customers/typeDefs.graphql'
# import  Source from '../../payment/Sources/typeDefs.graphql'
# import Discount from '../Discounts/typeDefs.graphql'
# import Object, ObjectType from '../../Object.graphql'
# import Node from '../../Node.graphql'
# import BillingSubscriptionItemList from '../SubscriptionItems/typeDefs.graphql'
# import Invoice from '../Invoices/typeDefs.graphql'
# import Plan from '../Plans/typeDefs.graphql'
# import constraint, expandable from '../../Directives.graphql'
# import Source from '../../payment/Sources/typeDefs.graphql'
# import BillingSubscriptionBilling from './BillingSubscriptionBilling.graphql'

"""
Define thresholds at which an invoice will be sent, and the subscription advanced to a new billing period
"""
type BillingSubscriptionBillingThresholds {
  """
  Monetary threshold that triggers the subscription to create an invoice
  """
  amount_gte: Float
  """
  Indicates if the billing_cycle_anchor should be reset when a threshold is reached. If true, billing_cycle_anchor will be updated to the date/time the threshold was last reached; otherwise, the value will remain unchanged. This value may not be true if the subscription contains items with plans that have aggregate_usage=last_ever.
  """
  reset_billing_cycle_anchor: Boolean
}

"""
https://stripe.com/docs/api/subscriptions
"""
type BillingSubscription implements Node & Object {
  """
  A non-negative decimal between 0 and 100, with at most two decimal places.
  This represents the percentage of the subscription invoice subtotal that will
  be transferred to the application owner's Stripe account.
  """
  application_fee_percent: Float

  # """
  # Either `charge_automatically`, or `send_invoice`. When charging automatically,
  # Stripe will attempt to pay this subscription at the end of the cycle using the
  # default source attached to the customer. When sending an invoice, Stripe will
  # email your customer an invoice with payment instructions.
  # """
  # billing: BillingSubscriptionBilling

  """
  Determines the date of the first full invoice, and, for plans with `month` or
  `year` intervals, the day of the month for subsequent invoices.
  """
  billing_cycle_anchor: DateTime

  # """
  # Define thresholds at which an invoice will be sent, and the subscription advanced to a new billing period
  # """
  # billing_thresholds: BillingSubscriptionBillingThresholds

  """
  If the subscription has been canceled with the `at_period_end` flag set to
  `true`, `cancel_at_period_end` on the subscription will be true. You can use
  this attribute to determine whether a subscription that has a status of active
  is scheduled to be canceled at the end of the current period.
  """
  cancel_at_period_end: Boolean

  """
  If the subscription has been canceled, the date of that cancellation. If the
  subscription was canceled with `cancel_at_period_end`, `canceled_at` will
  still reflect the date of the initial cancellation request, not the end of the
  subscription period when the subscription is automatically moved to a canceled state.
  """
  canceled_at: DateTime

  """
  Time at which the object was created. Measured in seconds since the Unix epoch.
  """
  created: DateTime

  """
  End of the current period that the subscription has been invoiced for. At the
  end of this period, a new invoice will be created.
  """
  current_period_end: DateTime

  """
  Start of the current period that the subscription has been invoiced for.
  """
  current_period_start: DateTime

  """
  ID of the customer who owns the subscription.
  """
  customer: Customer @expandable

  """
  Number of days a customer has to pay invoices generated by this subscription.
  This value will be `null` for subscriptions where
  `billing=charge_automatically`.
  """
  days_until_due: Int

  """
  ID of the default payment source for the subscription. It must belong to the
  customer associated with the subscription and be in a chargeable state. If not
  set, defaults to the customer's default source.
  """
  default_source: Source @expandable

  """
  Describes the current discount applied to this subscription, if there is one.
  When billing, a discount applied to a subscription overrides a discount
  applied on a customer-wide basis.
  """
  discount: Discount

  """
  If the subscription has ended, the date the subscription ended.
  """
  ended_at: DateTime

  """
  Unique identifier for the object.
  """
  id: ID!

  # """
  # List of subscription items, each with an attached plan.
  # """
  # items: BillingSubscriptionItemList

  # """
  # The most recent invoice this subscription has generated.
  # """
  # latest_invoice: Invoice @expandable

  """
  Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  """
  livemode: Boolean

  """
  Set of key-value pairs that you can attach to an object. This can be useful
  for storing additional information about the object in a structured format.
  """
  metadata: JSON

  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: ObjectType

  # """
  # Hash describing the plan the customer is subscribed to. Only set if the subscription contains a single plan.
  #  """
  # plan: Plan

  """
  The quantity of the plan to which the customer is subscribed. For example, if
  your plan is $10/user/month, and your customer has 5 users, you could pass 5
  as the quantity to have the customer charged $50 (5 x $10) monthly. Only set
  if the subscription contains a single plan.
  """
  quantity: Int

  """
  Date of the last substantial change to this subscription. For example, a
  change to the items array, or a change of status, will reset this timestamp.
  """
  start: DateTime

  #  """
  # Possible values are `incomplete`, `incomplete_expired`, `trialing`, `active`, `past_due`, `canceled`, or `unpaid`.

  # For `billing=charge_automatically` a subscription moves into `incomplete` if
  # the initial payment attempt fails. A subscription in this state can only have
  # metadata and default_source updated. Once the first invoice is paid, the
  # subscription moves into an `active` state. If the first invoice is not paid
  # within 23 hours, the subscription transitions to `incomplete_expired`. This is
  # a terminal state, the open invoice will be voided and no further invoices will be generated.

  # A subscription that is currently in a trial period is `trialing` and moves to `active` when the trial period is over.

  # If subscription `billing=charge_automatically` it becomes `past_due` when
  # payment to renew it fails and `canceled` or `unpaid` (depending on your
  # subscriptions settings) when Stripe has exhausted all payment retry attempts.

  # If subscription `billing=send_invoice` it becomes `past_due` when its invoice
  # is not paid by the due date, and `canceled` or `unpaid` if it is still not
  # paid by an additional deadline after that. Note that when a subscription has a
  # status of `unpaid`, no subsequent invoices will be attempted (invoices will be
  # created, but then immediately automatically closed). After receiving updated
  # payment information from a customer, you may choose to reopen and pay their
  # closed invoices.
  # """
  # status: BillingSubscriptionStatus

  # """
  # If provided, each invoice created by this subscription will apply the tax
  # rate, increasing the amount billed to the customer.
  # """
  # taxPercent: Float

  """
  If the subscription has a trial, the end of that trial.
  """
  trialEnd: DateTime

  """
  If the subscription has a trial, the beginning of that trial.
  """
  trialStart: DateTime
}

enum BillingSubscriptionStatus {
  active
  canceled
  incomplete
  incompleteExpired
  pastDue
  trialing
  unpaid
}

type BillingSubscriptionList implements Object {
  """
  String representing the objectâ€™s type. Objects of the same type share the same value. Always has the value list.
  """
  object: ObjectType
  data: [BillingSubscription]
  """
  True if this list has another page of items after this one that can be fetched.
  """
  has_more: Boolean
  """
  The URL where this list can be accessed.
  """
  url: String
}

###

input BillingSubscriptionWhereUniqueInput {
  id: ID!
}

"""
Removes the currently applied discount on a subscription.
"""
input BillingSubscriptionUpdateInput {
  deleteDiscount: Boolean
}
