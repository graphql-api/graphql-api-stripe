# import Currency from '../../Currency.graphql'
# import Product from '../../core/Products/typeDefs.graphql'
# import constraint, expandable from '../../Directives.graphql'
# import DateTime, JSON from '../../Scalars.graphql'
# import Customer from '../../core/Customers/typeDefs.graphql'
# import Source from '../../payment/Sources/typeDefs.graphql'
# import Discount from '../Discounts/typeDefs.graphql'
# import Object, ObjectType from '../../Object.graphql'
# import Node from '../../Node.graphql'
# import Invoice from '../Invoices/typeDefs.graphql'

type Plan implements Node & Object {
  """
  Whether the plan is currently available for new subscriptions.
  """
  active: Boolean

  """
  Specifies a usage aggregation strategy for plans of `usage_type=metered`.
  Allowed values are `sum` for summing up all usage during a period,
  `last_during_period` for picking the last usage record reported within a
  period, `last_ever` for picking the last usage record ever (across period
  bounds) or `max` which picks the usage record with the maximum reported usage
  during a period. Defaults to `sum`.
  """
  aggregateUsage: AggregateUsage

  """
  The amount in %s to be charged on the interval specified.
  """
  amount: Float

  """
  Describes how to compute the price per period. Either `per_unit` or `tiered`.
  `per_unit` indicates that the fixed amount (specified in `amount`) will be
  charged per unit in `quantity` (for plans with `usage_type=licensed`), or per
  unit of total usage (for plans with `usage_type=metered`). `tiered` indicates
  that the unit pricing will be computed using a tiering strategy as defined
  using the `tiers` and `tiers_mode` attributes.
  """
  billing_scheme: BillingScheme

  """
  Time at which the object was created. Measured in seconds since the Unix epoch.
  """
  created: DateTime

  """
  Three-letter [ISO currency
  code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be
  a [supported currency](https://stripe.com/docs/currencies).
  """
  currency: Currency

  """
  Unique identifier for the object.
  """
  id: ID!

  """
  One of `day`, `week`, `month` or `year`. The frequency with which a subscription should be billed.
  """
  interval: PlanInterval

  """
  The number of intervals (specified in the `interval` property) between
  subscription billings. For example, `interval=month` and `interval_count=3`
  bills every 3 months.
  """
  interval_count: Int

  """
  Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  """
  livemode: Boolean

  """
  Set of key-value pairs that you can attach to an object. This can be useful
  for storing additional information about the object in a structured format.
  """
  metadata: JSON

  """
  A brief description of the plan, hidden from customers.
  """
  nickname: String

  """
  String representing the object's type. Objects of the same type share the same value.
  """
  object: ObjectType

  """
  The product whose pricing this plan determines.
  """
  product: Product @expandable

  """
  Each element represents a pricing tier. This parameter requires
  `billing_scheme` to be set to `tiered`. See also the documentation for
  `billing_scheme`.
  """
  tiers: [PlanTier]

  """
  Defines if the tiering price should be `graduated` or `volume` based. In
  `volume`-based tiering, the maximum quantity within a period determines the
  per unit price, in `graduated` tiering pricing can successively change as the
  quantity grows.
  """
  tiers_mode: TiersMode

  """
  Apply a transformation to the reported usage or set quantity before computing
  the billed price. Cannot be combined with `tiers`.
  """
  transform_usage: String

  """
  Default number of trial days when subscribing a customer to this plan using [`trial_from_plan=true`](https://stripe.com/docs/api#create_subscription-trial_from_plan).
  """
  trial_period_days: Int

  """
  Configures how the quantity per period should be determined, can be either
  `metered` or `licensed`. `licensed` will automatically bill the `quantity` set
  for a plan when adding it to a subscription, `metered` will aggregate the
  total usage based on usage records. Defaults to `licensed`.
  """
  usage_type: UsageType
}

type TransformUsage {
  """
  Divide usage by this number.
  """
  divide_by: Int
  """
  After division, either round the result up or down.
  """
  round: Round
}

type PlanTier {
  """
  Price for the entire tier.
  """
  flatAmount: Int

  """
  Per unit price for units relevant to the tier.
  """
  unitAmount: Int

  """
  Up to and including to this quantity will be contained in the tier.
  """
  upTo: Int
}

enum UsageType {
  licensed
  metered
}

enum AggregateUsage {
  lastDuringPeriod
  lastEver
  max
  sum
}

enum Round {
  up
  down
}

enum TiersMode {
  graduated
  volume
}

enum PlanInterval {
  day
  month
  week
  year
}

enum BillingScheme {
  perUnit
  tiered
}
