# import Address, JapaneseAddress from './Address.graphql'
# import constraint, expandable from './Directives.graphql'
# import File from './core/Files/typeDefs.graphql'

type LegalEntity {
  additional_owners: [AdditionalOwner]
  address: Address
  """
  The Kana variation of the primary address of the legal entity (Japan only).
  """
  address_kana: JapaneseAddress
  """
  The Kanji variation of the primary address of the legal entity (Japan only).
  """
  address_kanji: JapaneseAddress
}

type LegalEntityCompany {
  address: Address

  """
  The Kana variation of the company's primary address (Japan only).
  """
  address_kana: JapaneseAddress

  """
  The Kanji variation of the company's primary address (Japan only).
  """
  address_kanji: JapaneseAddress

  """
  Whether information was collected from the company's directors.
  """
  directors_provided: Boolean

  """
  The company's legal name.
  """
  name: String

  """
  The Kana variation of the company's legal name Japan only).
  """
  name_kana: String

  """
  The Kanji variation of the company's legal name (Japan only).
  """
  name_kanji: String

  """
  Whether the company's owners have been provided.
  """
  owners_provided: Boolean

  """
  The company's phone number (used for verification).
  """
  phone: String

  """
  Whether the company's business ID number was provided.
  """
  tax_id_provided: Boolean

  """
  The jurisdiction in which the `tax_id` is registered (Germany-based companies only).
  """
  tax_id_registrar: String

  """
  Whether the company's business VAT number was provided.
  """
  vat_id_provided: Boolean
}

# input LegalEntityInput {
#  """
#  Information about anyone besides the account representative who owns at least 25% of the legal entity. This field is required only for Singapore, Hong Kong, and SEPA member countries. For details, see our Handling Identity Verification with the API documentation.
#  """
#  additional_owners: [AdditionalOwner]
# }

type AdditionalOwner {
  """
  The address of this additional owner.
  """
  address: Address
  """
  The date of birth of this additional owner.
  """
  dob: DateOfBirth
  """
  The email address of this additional owner.
  """
  email: String
  """
  The first name of this additional owner.
  """
  first_name: String
  """
  The last name of this additional owner.
  """
  last_name: String
  """
  The maiden name of this additional owner.
  """
  maiden_name: String
  """
  Whether the personal ID number of this additional owner was provided.
  """
  personal_id_number_provided: Boolean
  """
  The phone number of this additional owner.
  """
  phone: String
  """
  Whether the last 4 digits of this additional owner’s SSN have been provided.
  """
  ssn_last_4_provided: Boolean
  """
  The verification status of this additional owner.
  """
  verification: LegalEntityVerification
}

type LegalEntityVerification {
  details: String
  """
  A machine-readable code specifying the verification state for this legal entity.
  """
  details_code: LegalEntityVerificationDetailsCode
  """
  An identifying document for the person, either a passport or local ID card.
  """
  document: VerificationDocument
  # """
  # (ID of a file upload) A photo (jpg or png) of the back of an identifying document, either a passport or local ID card.
  # """
  # document_back: File @expandable
  """
  The state of verification for this legal entity.
  """
  status: LegalEntityVerificationStatus
}

type VerificationDocument {
  """
  The back of an ID returned by a file upload with a purpose value of identity_document.
  """
  back: File @expandable
  """
  A user-displayable string describing the verification state of this document. For example, if a document is uploaded and the picture is too fuzzy, this may say “Identity document is too unclear to read”.
  """
  details: String
  """
  One of document_corrupt, document_failed_copy, document_not_readable, document_failed_greyscale, document_not_uploaded, document_id_type_not_supported, document_id_country_not_supported, document_failed_other, document_fraudulent, document_invalid, document_manipulated, document_missing_back, document_missing_front, document_photo_mismatch, document_too_large, or document_failed_test_mode. A machine-readable code specifying the verification state for this document.
  """
  details_code: DocumentDetailsCode
  """
  The front of an ID returned by a file upload with a purpose value of identity_document.
  """
  front: File @expandable
}

enum LegalEntityVerificationDetailsCode {
  scan_name_mismatch
  failed_keyed_identity
  failed_other
  # SCAN_CORRUPT
  # SCAN_NOT_READABLE
  # SCAN_FAILED_GREYSCALE
  # SCAN_NOT_UPLOADED
  # SCAN_ID_TYPE_NOT_SUPPORTED
  # SCAN_ID_COUNTRY_NOT_SUPPORTED
  # SCAN_FAILED_OTHER
  # SCAN_FAILED_TEST_MODE
}

enum LegalEntityVerificationStatus {
  unverified
  pending
  verified
}

enum DocumentDetailsCode {
  document_corrupt
  document_failed_copy
  document_not_readable
  document_failed_greyscale
  document_not_uploaded
  document_id_type_not_supported
  document_id_country_not_supported
  document_failed_other
  document_fraudulent
  document_invalid
  document_manipulated
  document_missing_back
  document_missing_front
  document_photo_mismatch
  document_too_large
  document_failed_test_mode
}

type DateOfBirth {
  """
  The day of birth, between 1 and 31.
  """
  day: Int
  """
  The month of birth, between 1 and 12.
  """
  month: Int
  """
  The four-digit year of birth.
  """
  year: Int
}

input DateOfBirthInput {
  """
  The day of birth, between 1 and 31.
  """
  day: Int
  """
  The month of birth, between 1 and 12.
  """
  month: Int
  """
  The four-digit year of birth.
  """
  year: Int
}
